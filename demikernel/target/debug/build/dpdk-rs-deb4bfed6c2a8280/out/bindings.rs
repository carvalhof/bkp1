/* automatically generated by rust-bindgen 0.60.1 */

#[repr(C)]
#[derive(Copy, Clone, Debug, Default, Eq, Hash, Ord, PartialEq, PartialOrd)]
pub struct __BindgenBitfieldUnit<Storage> {
    storage: Storage,
}
impl<Storage> __BindgenBitfieldUnit<Storage> {
    #[inline]
    pub const fn new(storage: Storage) -> Self {
        Self { storage }
    }
}
impl<Storage> __BindgenBitfieldUnit<Storage>
where
    Storage: AsRef<[u8]> + AsMut<[u8]>,
{
    #[inline]
    pub fn get_bit(&self, index: usize) -> bool {
        debug_assert!(index / 8 < self.storage.as_ref().len());
        let byte_index = index / 8;
        let byte = self.storage.as_ref()[byte_index];
        let bit_index = if cfg!(target_endian = "big") {
            7 - (index % 8)
        } else {
            index % 8
        };
        let mask = 1 << bit_index;
        byte & mask == mask
    }
    #[inline]
    pub fn set_bit(&mut self, index: usize, val: bool) {
        debug_assert!(index / 8 < self.storage.as_ref().len());
        let byte_index = index / 8;
        let byte = &mut self.storage.as_mut()[byte_index];
        let bit_index = if cfg!(target_endian = "big") {
            7 - (index % 8)
        } else {
            index % 8
        };
        let mask = 1 << bit_index;
        if val {
            *byte |= mask;
        } else {
            *byte &= !mask;
        }
    }
    #[inline]
    pub fn get(&self, bit_offset: usize, bit_width: u8) -> u64 {
        debug_assert!(bit_width <= 64);
        debug_assert!(bit_offset / 8 < self.storage.as_ref().len());
        debug_assert!((bit_offset + (bit_width as usize)) / 8 <= self.storage.as_ref().len());
        let mut val = 0;
        for i in 0..(bit_width as usize) {
            if self.get_bit(i + bit_offset) {
                let index = if cfg!(target_endian = "big") {
                    bit_width as usize - 1 - i
                } else {
                    i
                };
                val |= 1 << index;
            }
        }
        val
    }
    #[inline]
    pub fn set(&mut self, bit_offset: usize, bit_width: u8, val: u64) {
        debug_assert!(bit_width <= 64);
        debug_assert!(bit_offset / 8 < self.storage.as_ref().len());
        debug_assert!((bit_offset + (bit_width as usize)) / 8 <= self.storage.as_ref().len());
        for i in 0..(bit_width as usize) {
            let mask = 1 << i;
            let val_bit_is_set = val & mask == mask;
            let index = if cfg!(target_endian = "big") {
                bit_width as usize - 1 - i
            } else {
                i
            };
            self.set_bit(index + bit_offset, val_bit_is_set);
        }
    }
}
pub const RTE_MAX_ETHPORTS: u32 = 32;
pub const RTE_PKTMBUF_HEADROOM: u32 = 128;
pub const RTE_ETH_LINK_FULL_DUPLEX: u32 = 1;
pub const RTE_ETH_LINK_UP: u32 = 1;
pub const RTE_MBUF_DEFAULT_BUF_SIZE: u32 = 2176;
pub const RTE_ETHER_MAX_LEN: u32 = 1518;
pub const RTE_ETHER_MAX_JUMBO_FRAME_LEN: u32 = 16128;
pub const RTE_ETH_DEV_NO_OWNER: u32 = 0;
pub type __uint8_t = ::std::os::raw::c_uchar;
pub type __uint16_t = ::std::os::raw::c_ushort;
pub type __int32_t = ::std::os::raw::c_int;
pub type __uint32_t = ::std::os::raw::c_uint;
pub type __uint64_t = ::std::os::raw::c_ulong;
pub type size_t = ::std::os::raw::c_ulong;
pub type rte_iova_t = u64;
pub type RTE_MARKER = [*mut ::std::os::raw::c_void; 0usize];
pub type RTE_MARKER64 = [u64; 0usize];
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rte_device {
    _unused: [u8; 0],
}
extern "C" {
    pub fn rte_strerror(errnum: ::std::os::raw::c_int) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn rte_eal_init(argc: ::std::os::raw::c_int, argv: *mut *mut ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
pub type lcore_function_t =
    ::std::option::Option<unsafe extern "C" fn(arg1: *mut ::std::os::raw::c_void) -> ::std::os::raw::c_int>;
extern "C" {
    pub fn rte_eal_remote_launch(
        f: lcore_function_t,
        arg: *mut ::std::os::raw::c_void,
        worker_id: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rte_eal_mp_wait_lcore();
}
extern "C" {
    pub fn rte_lcore_count() -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn rte_socket_id() -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn rte_get_next_lcore(
        i: ::std::os::raw::c_uint,
        skip_main: ::std::os::raw::c_int,
        wrap: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn rte_delay_us_block(us: ::std::os::raw::c_uint);
}
#[repr(C)]
#[repr(align(8))]
#[derive(Debug, Copy, Clone)]
pub struct rte_eth_link {
    pub link_speed: u32,
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 1usize]>,
    pub __bindgen_padding_0: [u8; 3usize],
}
#[test]
fn bindgen_test_layout_rte_eth_link() {
    assert_eq!(
        ::std::mem::size_of::<rte_eth_link>(),
        8usize,
        concat!("Size of: ", stringify!(rte_eth_link))
    );
    assert_eq!(
        ::std::mem::align_of::<rte_eth_link>(),
        8usize,
        concat!("Alignment of ", stringify!(rte_eth_link))
    );
    fn test_field_link_speed() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<rte_eth_link>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).link_speed) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(rte_eth_link),
                "::",
                stringify!(link_speed)
            )
        );
    }
    test_field_link_speed();
}
impl rte_eth_link {
    #[inline]
    pub fn link_duplex(&self) -> u16 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_link_duplex(&mut self, val: u16) {
        unsafe {
            let val: u16 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn link_autoneg(&self) -> u16 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(1usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_link_autoneg(&mut self, val: u16) {
        unsafe {
            let val: u16 = ::std::mem::transmute(val);
            self._bitfield_1.set(1usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn link_status(&self) -> u16 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(2usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_link_status(&mut self, val: u16) {
        unsafe {
            let val: u16 = ::std::mem::transmute(val);
            self._bitfield_1.set(2usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        link_duplex: u16,
        link_autoneg: u16,
        link_status: u16,
    ) -> __BindgenBitfieldUnit<[u8; 1usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 1usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let link_duplex: u16 = unsafe { ::std::mem::transmute(link_duplex) };
            link_duplex as u64
        });
        __bindgen_bitfield_unit.set(1usize, 1u8, {
            let link_autoneg: u16 = unsafe { ::std::mem::transmute(link_autoneg) };
            link_autoneg as u64
        });
        __bindgen_bitfield_unit.set(2usize, 1u8, {
            let link_status: u16 = unsafe { ::std::mem::transmute(link_status) };
            link_status as u64
        });
        __bindgen_bitfield_unit
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rte_eth_thresh {
    pub pthresh: u8,
    pub hthresh: u8,
    pub wthresh: u8,
}
#[test]
fn bindgen_test_layout_rte_eth_thresh() {
    assert_eq!(
        ::std::mem::size_of::<rte_eth_thresh>(),
        3usize,
        concat!("Size of: ", stringify!(rte_eth_thresh))
    );
    assert_eq!(
        ::std::mem::align_of::<rte_eth_thresh>(),
        1usize,
        concat!("Alignment of ", stringify!(rte_eth_thresh))
    );
    fn test_field_pthresh() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<rte_eth_thresh>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).pthresh) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(rte_eth_thresh),
                "::",
                stringify!(pthresh)
            )
        );
    }
    test_field_pthresh();
    fn test_field_hthresh() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<rte_eth_thresh>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).hthresh) as usize - ptr as usize
            },
            1usize,
            concat!(
                "Offset of field: ",
                stringify!(rte_eth_thresh),
                "::",
                stringify!(hthresh)
            )
        );
    }
    test_field_hthresh();
    fn test_field_wthresh() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<rte_eth_thresh>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).wthresh) as usize - ptr as usize
            },
            2usize,
            concat!(
                "Offset of field: ",
                stringify!(rte_eth_thresh),
                "::",
                stringify!(wthresh)
            )
        );
    }
    test_field_wthresh();
}
pub const rte_eth_rx_mq_mode_RTE_ETH_MQ_RX_NONE: rte_eth_rx_mq_mode = 0;
pub const rte_eth_rx_mq_mode_RTE_ETH_MQ_RX_RSS: rte_eth_rx_mq_mode = 1;
pub const rte_eth_rx_mq_mode_RTE_ETH_MQ_RX_DCB: rte_eth_rx_mq_mode = 2;
pub const rte_eth_rx_mq_mode_RTE_ETH_MQ_RX_DCB_RSS: rte_eth_rx_mq_mode = 3;
pub const rte_eth_rx_mq_mode_RTE_ETH_MQ_RX_VMDQ_ONLY: rte_eth_rx_mq_mode = 4;
pub const rte_eth_rx_mq_mode_RTE_ETH_MQ_RX_VMDQ_RSS: rte_eth_rx_mq_mode = 5;
pub const rte_eth_rx_mq_mode_RTE_ETH_MQ_RX_VMDQ_DCB: rte_eth_rx_mq_mode = 6;
pub const rte_eth_rx_mq_mode_RTE_ETH_MQ_RX_VMDQ_DCB_RSS: rte_eth_rx_mq_mode = 7;
pub type rte_eth_rx_mq_mode = ::std::os::raw::c_uint;
pub const rte_eth_tx_mq_mode_RTE_ETH_MQ_TX_NONE: rte_eth_tx_mq_mode = 0;
pub const rte_eth_tx_mq_mode_RTE_ETH_MQ_TX_DCB: rte_eth_tx_mq_mode = 1;
pub const rte_eth_tx_mq_mode_RTE_ETH_MQ_TX_VMDQ_DCB: rte_eth_tx_mq_mode = 2;
pub const rte_eth_tx_mq_mode_RTE_ETH_MQ_TX_VMDQ_ONLY: rte_eth_tx_mq_mode = 3;
pub type rte_eth_tx_mq_mode = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rte_eth_rxmode {
    pub mq_mode: rte_eth_rx_mq_mode,
    pub mtu: u32,
    pub max_lro_pkt_size: u32,
    pub offloads: u64,
    pub reserved_64s: [u64; 2usize],
    pub reserved_ptrs: [*mut ::std::os::raw::c_void; 2usize],
}
#[test]
fn bindgen_test_layout_rte_eth_rxmode() {
    assert_eq!(
        ::std::mem::size_of::<rte_eth_rxmode>(),
        56usize,
        concat!("Size of: ", stringify!(rte_eth_rxmode))
    );
    assert_eq!(
        ::std::mem::align_of::<rte_eth_rxmode>(),
        8usize,
        concat!("Alignment of ", stringify!(rte_eth_rxmode))
    );
    fn test_field_mq_mode() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<rte_eth_rxmode>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).mq_mode) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(rte_eth_rxmode),
                "::",
                stringify!(mq_mode)
            )
        );
    }
    test_field_mq_mode();
    fn test_field_mtu() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<rte_eth_rxmode>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).mtu) as usize - ptr as usize
            },
            4usize,
            concat!("Offset of field: ", stringify!(rte_eth_rxmode), "::", stringify!(mtu))
        );
    }
    test_field_mtu();
    fn test_field_max_lro_pkt_size() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<rte_eth_rxmode>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).max_lro_pkt_size) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(rte_eth_rxmode),
                "::",
                stringify!(max_lro_pkt_size)
            )
        );
    }
    test_field_max_lro_pkt_size();
    fn test_field_offloads() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<rte_eth_rxmode>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).offloads) as usize - ptr as usize
            },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(rte_eth_rxmode),
                "::",
                stringify!(offloads)
            )
        );
    }
    test_field_offloads();
    fn test_field_reserved_64s() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<rte_eth_rxmode>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).reserved_64s) as usize - ptr as usize
            },
            24usize,
            concat!(
                "Offset of field: ",
                stringify!(rte_eth_rxmode),
                "::",
                stringify!(reserved_64s)
            )
        );
    }
    test_field_reserved_64s();
    fn test_field_reserved_ptrs() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<rte_eth_rxmode>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).reserved_ptrs) as usize - ptr as usize
            },
            40usize,
            concat!(
                "Offset of field: ",
                stringify!(rte_eth_rxmode),
                "::",
                stringify!(reserved_ptrs)
            )
        );
    }
    test_field_reserved_ptrs();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rte_eth_rss_conf {
    pub rss_key: *mut u8,
    pub rss_key_len: u8,
    pub rss_hf: u64,
}
#[test]
fn bindgen_test_layout_rte_eth_rss_conf() {
    assert_eq!(
        ::std::mem::size_of::<rte_eth_rss_conf>(),
        24usize,
        concat!("Size of: ", stringify!(rte_eth_rss_conf))
    );
    assert_eq!(
        ::std::mem::align_of::<rte_eth_rss_conf>(),
        8usize,
        concat!("Alignment of ", stringify!(rte_eth_rss_conf))
    );
    fn test_field_rss_key() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<rte_eth_rss_conf>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).rss_key) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(rte_eth_rss_conf),
                "::",
                stringify!(rss_key)
            )
        );
    }
    test_field_rss_key();
    fn test_field_rss_key_len() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<rte_eth_rss_conf>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).rss_key_len) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(rte_eth_rss_conf),
                "::",
                stringify!(rss_key_len)
            )
        );
    }
    test_field_rss_key_len();
    fn test_field_rss_hf() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<rte_eth_rss_conf>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).rss_hf) as usize - ptr as usize
            },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(rte_eth_rss_conf),
                "::",
                stringify!(rss_hf)
            )
        );
    }
    test_field_rss_hf();
}
pub const rte_eth_nb_tcs_RTE_ETH_4_TCS: rte_eth_nb_tcs = 4;
pub const rte_eth_nb_tcs_RTE_ETH_8_TCS: rte_eth_nb_tcs = 8;
pub type rte_eth_nb_tcs = ::std::os::raw::c_uint;
pub const rte_eth_nb_pools_RTE_ETH_8_POOLS: rte_eth_nb_pools = 8;
pub const rte_eth_nb_pools_RTE_ETH_16_POOLS: rte_eth_nb_pools = 16;
pub const rte_eth_nb_pools_RTE_ETH_32_POOLS: rte_eth_nb_pools = 32;
pub const rte_eth_nb_pools_RTE_ETH_64_POOLS: rte_eth_nb_pools = 64;
pub type rte_eth_nb_pools = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rte_eth_dcb_rx_conf {
    pub nb_tcs: rte_eth_nb_tcs,
    pub dcb_tc: [u8; 8usize],
}
#[test]
fn bindgen_test_layout_rte_eth_dcb_rx_conf() {
    assert_eq!(
        ::std::mem::size_of::<rte_eth_dcb_rx_conf>(),
        12usize,
        concat!("Size of: ", stringify!(rte_eth_dcb_rx_conf))
    );
    assert_eq!(
        ::std::mem::align_of::<rte_eth_dcb_rx_conf>(),
        4usize,
        concat!("Alignment of ", stringify!(rte_eth_dcb_rx_conf))
    );
    fn test_field_nb_tcs() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<rte_eth_dcb_rx_conf>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).nb_tcs) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(rte_eth_dcb_rx_conf),
                "::",
                stringify!(nb_tcs)
            )
        );
    }
    test_field_nb_tcs();
    fn test_field_dcb_tc() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<rte_eth_dcb_rx_conf>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).dcb_tc) as usize - ptr as usize
            },
            4usize,
            concat!(
                "Offset of field: ",
                stringify!(rte_eth_dcb_rx_conf),
                "::",
                stringify!(dcb_tc)
            )
        );
    }
    test_field_dcb_tc();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rte_eth_vmdq_dcb_tx_conf {
    pub nb_queue_pools: rte_eth_nb_pools,
    pub dcb_tc: [u8; 8usize],
}
#[test]
fn bindgen_test_layout_rte_eth_vmdq_dcb_tx_conf() {
    assert_eq!(
        ::std::mem::size_of::<rte_eth_vmdq_dcb_tx_conf>(),
        12usize,
        concat!("Size of: ", stringify!(rte_eth_vmdq_dcb_tx_conf))
    );
    assert_eq!(
        ::std::mem::align_of::<rte_eth_vmdq_dcb_tx_conf>(),
        4usize,
        concat!("Alignment of ", stringify!(rte_eth_vmdq_dcb_tx_conf))
    );
    fn test_field_nb_queue_pools() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<rte_eth_vmdq_dcb_tx_conf>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).nb_queue_pools) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(rte_eth_vmdq_dcb_tx_conf),
                "::",
                stringify!(nb_queue_pools)
            )
        );
    }
    test_field_nb_queue_pools();
    fn test_field_dcb_tc() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<rte_eth_vmdq_dcb_tx_conf>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).dcb_tc) as usize - ptr as usize
            },
            4usize,
            concat!(
                "Offset of field: ",
                stringify!(rte_eth_vmdq_dcb_tx_conf),
                "::",
                stringify!(dcb_tc)
            )
        );
    }
    test_field_dcb_tc();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rte_eth_dcb_tx_conf {
    pub nb_tcs: rte_eth_nb_tcs,
    pub dcb_tc: [u8; 8usize],
}
#[test]
fn bindgen_test_layout_rte_eth_dcb_tx_conf() {
    assert_eq!(
        ::std::mem::size_of::<rte_eth_dcb_tx_conf>(),
        12usize,
        concat!("Size of: ", stringify!(rte_eth_dcb_tx_conf))
    );
    assert_eq!(
        ::std::mem::align_of::<rte_eth_dcb_tx_conf>(),
        4usize,
        concat!("Alignment of ", stringify!(rte_eth_dcb_tx_conf))
    );
    fn test_field_nb_tcs() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<rte_eth_dcb_tx_conf>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).nb_tcs) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(rte_eth_dcb_tx_conf),
                "::",
                stringify!(nb_tcs)
            )
        );
    }
    test_field_nb_tcs();
    fn test_field_dcb_tc() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<rte_eth_dcb_tx_conf>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).dcb_tc) as usize - ptr as usize
            },
            4usize,
            concat!(
                "Offset of field: ",
                stringify!(rte_eth_dcb_tx_conf),
                "::",
                stringify!(dcb_tc)
            )
        );
    }
    test_field_dcb_tc();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rte_eth_vmdq_tx_conf {
    pub nb_queue_pools: rte_eth_nb_pools,
}
#[test]
fn bindgen_test_layout_rte_eth_vmdq_tx_conf() {
    assert_eq!(
        ::std::mem::size_of::<rte_eth_vmdq_tx_conf>(),
        4usize,
        concat!("Size of: ", stringify!(rte_eth_vmdq_tx_conf))
    );
    assert_eq!(
        ::std::mem::align_of::<rte_eth_vmdq_tx_conf>(),
        4usize,
        concat!("Alignment of ", stringify!(rte_eth_vmdq_tx_conf))
    );
    fn test_field_nb_queue_pools() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<rte_eth_vmdq_tx_conf>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).nb_queue_pools) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(rte_eth_vmdq_tx_conf),
                "::",
                stringify!(nb_queue_pools)
            )
        );
    }
    test_field_nb_queue_pools();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rte_eth_vmdq_dcb_conf {
    pub nb_queue_pools: rte_eth_nb_pools,
    pub enable_default_pool: u8,
    pub default_pool: u8,
    pub nb_pool_maps: u8,
    pub pool_map: [rte_eth_vmdq_dcb_conf__bindgen_ty_1; 64usize],
    pub dcb_tc: [u8; 8usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rte_eth_vmdq_dcb_conf__bindgen_ty_1 {
    pub vlan_id: u16,
    pub pools: u64,
}
#[test]
fn bindgen_test_layout_rte_eth_vmdq_dcb_conf__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<rte_eth_vmdq_dcb_conf__bindgen_ty_1>(),
        16usize,
        concat!("Size of: ", stringify!(rte_eth_vmdq_dcb_conf__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<rte_eth_vmdq_dcb_conf__bindgen_ty_1>(),
        8usize,
        concat!("Alignment of ", stringify!(rte_eth_vmdq_dcb_conf__bindgen_ty_1))
    );
    fn test_field_vlan_id() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<rte_eth_vmdq_dcb_conf__bindgen_ty_1>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).vlan_id) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(rte_eth_vmdq_dcb_conf__bindgen_ty_1),
                "::",
                stringify!(vlan_id)
            )
        );
    }
    test_field_vlan_id();
    fn test_field_pools() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<rte_eth_vmdq_dcb_conf__bindgen_ty_1>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).pools) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(rte_eth_vmdq_dcb_conf__bindgen_ty_1),
                "::",
                stringify!(pools)
            )
        );
    }
    test_field_pools();
}
#[test]
fn bindgen_test_layout_rte_eth_vmdq_dcb_conf() {
    assert_eq!(
        ::std::mem::size_of::<rte_eth_vmdq_dcb_conf>(),
        1040usize,
        concat!("Size of: ", stringify!(rte_eth_vmdq_dcb_conf))
    );
    assert_eq!(
        ::std::mem::align_of::<rte_eth_vmdq_dcb_conf>(),
        8usize,
        concat!("Alignment of ", stringify!(rte_eth_vmdq_dcb_conf))
    );
    fn test_field_nb_queue_pools() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<rte_eth_vmdq_dcb_conf>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).nb_queue_pools) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(rte_eth_vmdq_dcb_conf),
                "::",
                stringify!(nb_queue_pools)
            )
        );
    }
    test_field_nb_queue_pools();
    fn test_field_enable_default_pool() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<rte_eth_vmdq_dcb_conf>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).enable_default_pool) as usize - ptr as usize
            },
            4usize,
            concat!(
                "Offset of field: ",
                stringify!(rte_eth_vmdq_dcb_conf),
                "::",
                stringify!(enable_default_pool)
            )
        );
    }
    test_field_enable_default_pool();
    fn test_field_default_pool() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<rte_eth_vmdq_dcb_conf>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).default_pool) as usize - ptr as usize
            },
            5usize,
            concat!(
                "Offset of field: ",
                stringify!(rte_eth_vmdq_dcb_conf),
                "::",
                stringify!(default_pool)
            )
        );
    }
    test_field_default_pool();
    fn test_field_nb_pool_maps() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<rte_eth_vmdq_dcb_conf>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).nb_pool_maps) as usize - ptr as usize
            },
            6usize,
            concat!(
                "Offset of field: ",
                stringify!(rte_eth_vmdq_dcb_conf),
                "::",
                stringify!(nb_pool_maps)
            )
        );
    }
    test_field_nb_pool_maps();
    fn test_field_pool_map() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<rte_eth_vmdq_dcb_conf>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).pool_map) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(rte_eth_vmdq_dcb_conf),
                "::",
                stringify!(pool_map)
            )
        );
    }
    test_field_pool_map();
    fn test_field_dcb_tc() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<rte_eth_vmdq_dcb_conf>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).dcb_tc) as usize - ptr as usize
            },
            1032usize,
            concat!(
                "Offset of field: ",
                stringify!(rte_eth_vmdq_dcb_conf),
                "::",
                stringify!(dcb_tc)
            )
        );
    }
    test_field_dcb_tc();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rte_eth_vmdq_rx_conf {
    pub nb_queue_pools: rte_eth_nb_pools,
    pub enable_default_pool: u8,
    pub default_pool: u8,
    pub enable_loop_back: u8,
    pub nb_pool_maps: u8,
    pub rx_mode: u32,
    pub pool_map: [rte_eth_vmdq_rx_conf__bindgen_ty_1; 64usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rte_eth_vmdq_rx_conf__bindgen_ty_1 {
    pub vlan_id: u16,
    pub pools: u64,
}
#[test]
fn bindgen_test_layout_rte_eth_vmdq_rx_conf__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<rte_eth_vmdq_rx_conf__bindgen_ty_1>(),
        16usize,
        concat!("Size of: ", stringify!(rte_eth_vmdq_rx_conf__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<rte_eth_vmdq_rx_conf__bindgen_ty_1>(),
        8usize,
        concat!("Alignment of ", stringify!(rte_eth_vmdq_rx_conf__bindgen_ty_1))
    );
    fn test_field_vlan_id() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<rte_eth_vmdq_rx_conf__bindgen_ty_1>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).vlan_id) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(rte_eth_vmdq_rx_conf__bindgen_ty_1),
                "::",
                stringify!(vlan_id)
            )
        );
    }
    test_field_vlan_id();
    fn test_field_pools() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<rte_eth_vmdq_rx_conf__bindgen_ty_1>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).pools) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(rte_eth_vmdq_rx_conf__bindgen_ty_1),
                "::",
                stringify!(pools)
            )
        );
    }
    test_field_pools();
}
#[test]
fn bindgen_test_layout_rte_eth_vmdq_rx_conf() {
    assert_eq!(
        ::std::mem::size_of::<rte_eth_vmdq_rx_conf>(),
        1040usize,
        concat!("Size of: ", stringify!(rte_eth_vmdq_rx_conf))
    );
    assert_eq!(
        ::std::mem::align_of::<rte_eth_vmdq_rx_conf>(),
        8usize,
        concat!("Alignment of ", stringify!(rte_eth_vmdq_rx_conf))
    );
    fn test_field_nb_queue_pools() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<rte_eth_vmdq_rx_conf>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).nb_queue_pools) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(rte_eth_vmdq_rx_conf),
                "::",
                stringify!(nb_queue_pools)
            )
        );
    }
    test_field_nb_queue_pools();
    fn test_field_enable_default_pool() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<rte_eth_vmdq_rx_conf>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).enable_default_pool) as usize - ptr as usize
            },
            4usize,
            concat!(
                "Offset of field: ",
                stringify!(rte_eth_vmdq_rx_conf),
                "::",
                stringify!(enable_default_pool)
            )
        );
    }
    test_field_enable_default_pool();
    fn test_field_default_pool() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<rte_eth_vmdq_rx_conf>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).default_pool) as usize - ptr as usize
            },
            5usize,
            concat!(
                "Offset of field: ",
                stringify!(rte_eth_vmdq_rx_conf),
                "::",
                stringify!(default_pool)
            )
        );
    }
    test_field_default_pool();
    fn test_field_enable_loop_back() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<rte_eth_vmdq_rx_conf>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).enable_loop_back) as usize - ptr as usize
            },
            6usize,
            concat!(
                "Offset of field: ",
                stringify!(rte_eth_vmdq_rx_conf),
                "::",
                stringify!(enable_loop_back)
            )
        );
    }
    test_field_enable_loop_back();
    fn test_field_nb_pool_maps() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<rte_eth_vmdq_rx_conf>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).nb_pool_maps) as usize - ptr as usize
            },
            7usize,
            concat!(
                "Offset of field: ",
                stringify!(rte_eth_vmdq_rx_conf),
                "::",
                stringify!(nb_pool_maps)
            )
        );
    }
    test_field_nb_pool_maps();
    fn test_field_rx_mode() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<rte_eth_vmdq_rx_conf>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).rx_mode) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(rte_eth_vmdq_rx_conf),
                "::",
                stringify!(rx_mode)
            )
        );
    }
    test_field_rx_mode();
    fn test_field_pool_map() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<rte_eth_vmdq_rx_conf>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).pool_map) as usize - ptr as usize
            },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(rte_eth_vmdq_rx_conf),
                "::",
                stringify!(pool_map)
            )
        );
    }
    test_field_pool_map();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rte_eth_txmode {
    pub mq_mode: rte_eth_tx_mq_mode,
    pub offloads: u64,
    pub pvid: u16,
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 1usize]>,
    pub reserved_64s: [u64; 2usize],
    pub reserved_ptrs: [*mut ::std::os::raw::c_void; 2usize],
}
#[test]
fn bindgen_test_layout_rte_eth_txmode() {
    assert_eq!(
        ::std::mem::size_of::<rte_eth_txmode>(),
        56usize,
        concat!("Size of: ", stringify!(rte_eth_txmode))
    );
    assert_eq!(
        ::std::mem::align_of::<rte_eth_txmode>(),
        8usize,
        concat!("Alignment of ", stringify!(rte_eth_txmode))
    );
    fn test_field_mq_mode() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<rte_eth_txmode>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).mq_mode) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(rte_eth_txmode),
                "::",
                stringify!(mq_mode)
            )
        );
    }
    test_field_mq_mode();
    fn test_field_offloads() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<rte_eth_txmode>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).offloads) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(rte_eth_txmode),
                "::",
                stringify!(offloads)
            )
        );
    }
    test_field_offloads();
    fn test_field_pvid() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<rte_eth_txmode>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).pvid) as usize - ptr as usize
            },
            16usize,
            concat!("Offset of field: ", stringify!(rte_eth_txmode), "::", stringify!(pvid))
        );
    }
    test_field_pvid();
    fn test_field_reserved_64s() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<rte_eth_txmode>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).reserved_64s) as usize - ptr as usize
            },
            24usize,
            concat!(
                "Offset of field: ",
                stringify!(rte_eth_txmode),
                "::",
                stringify!(reserved_64s)
            )
        );
    }
    test_field_reserved_64s();
    fn test_field_reserved_ptrs() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<rte_eth_txmode>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).reserved_ptrs) as usize - ptr as usize
            },
            40usize,
            concat!(
                "Offset of field: ",
                stringify!(rte_eth_txmode),
                "::",
                stringify!(reserved_ptrs)
            )
        );
    }
    test_field_reserved_ptrs();
}
impl rte_eth_txmode {
    #[inline]
    pub fn hw_vlan_reject_tagged(&self) -> u8 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_hw_vlan_reject_tagged(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn hw_vlan_reject_untagged(&self) -> u8 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(1usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_hw_vlan_reject_untagged(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(1usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn hw_vlan_insert_pvid(&self) -> u8 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(2usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_hw_vlan_insert_pvid(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(2usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        hw_vlan_reject_tagged: u8,
        hw_vlan_reject_untagged: u8,
        hw_vlan_insert_pvid: u8,
    ) -> __BindgenBitfieldUnit<[u8; 1usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 1usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let hw_vlan_reject_tagged: u8 = unsafe { ::std::mem::transmute(hw_vlan_reject_tagged) };
            hw_vlan_reject_tagged as u64
        });
        __bindgen_bitfield_unit.set(1usize, 1u8, {
            let hw_vlan_reject_untagged: u8 = unsafe { ::std::mem::transmute(hw_vlan_reject_untagged) };
            hw_vlan_reject_untagged as u64
        });
        __bindgen_bitfield_unit.set(2usize, 1u8, {
            let hw_vlan_insert_pvid: u8 = unsafe { ::std::mem::transmute(hw_vlan_insert_pvid) };
            hw_vlan_insert_pvid as u64
        });
        __bindgen_bitfield_unit
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rte_eth_rxseg_split {
    pub mp: *mut rte_mempool,
    pub length: u16,
    pub offset: u16,
    pub proto_hdr: u32,
}
#[test]
fn bindgen_test_layout_rte_eth_rxseg_split() {
    assert_eq!(
        ::std::mem::size_of::<rte_eth_rxseg_split>(),
        16usize,
        concat!("Size of: ", stringify!(rte_eth_rxseg_split))
    );
    assert_eq!(
        ::std::mem::align_of::<rte_eth_rxseg_split>(),
        8usize,
        concat!("Alignment of ", stringify!(rte_eth_rxseg_split))
    );
    fn test_field_mp() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<rte_eth_rxseg_split>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).mp) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(rte_eth_rxseg_split),
                "::",
                stringify!(mp)
            )
        );
    }
    test_field_mp();
    fn test_field_length() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<rte_eth_rxseg_split>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).length) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(rte_eth_rxseg_split),
                "::",
                stringify!(length)
            )
        );
    }
    test_field_length();
    fn test_field_offset() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<rte_eth_rxseg_split>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).offset) as usize - ptr as usize
            },
            10usize,
            concat!(
                "Offset of field: ",
                stringify!(rte_eth_rxseg_split),
                "::",
                stringify!(offset)
            )
        );
    }
    test_field_offset();
    fn test_field_proto_hdr() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<rte_eth_rxseg_split>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).proto_hdr) as usize - ptr as usize
            },
            12usize,
            concat!(
                "Offset of field: ",
                stringify!(rte_eth_rxseg_split),
                "::",
                stringify!(proto_hdr)
            )
        );
    }
    test_field_proto_hdr();
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union rte_eth_rxseg {
    pub split: rte_eth_rxseg_split,
}
#[test]
fn bindgen_test_layout_rte_eth_rxseg() {
    assert_eq!(
        ::std::mem::size_of::<rte_eth_rxseg>(),
        16usize,
        concat!("Size of: ", stringify!(rte_eth_rxseg))
    );
    assert_eq!(
        ::std::mem::align_of::<rte_eth_rxseg>(),
        8usize,
        concat!("Alignment of ", stringify!(rte_eth_rxseg))
    );
    fn test_field_split() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<rte_eth_rxseg>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).split) as usize - ptr as usize
            },
            0usize,
            concat!("Offset of field: ", stringify!(rte_eth_rxseg), "::", stringify!(split))
        );
    }
    test_field_split();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rte_eth_rxconf {
    pub rx_thresh: rte_eth_thresh,
    pub rx_free_thresh: u16,
    pub rx_drop_en: u8,
    pub rx_deferred_start: u8,
    pub rx_nseg: u16,
    pub share_group: u16,
    pub share_qid: u16,
    pub offloads: u64,
    pub rx_seg: *mut rte_eth_rxseg,
    pub rx_mempools: *mut *mut rte_mempool,
    pub rx_nmempool: u16,
    pub reserved_64s: [u64; 2usize],
    pub reserved_ptrs: [*mut ::std::os::raw::c_void; 2usize],
}
#[test]
fn bindgen_test_layout_rte_eth_rxconf() {
    assert_eq!(
        ::std::mem::size_of::<rte_eth_rxconf>(),
        80usize,
        concat!("Size of: ", stringify!(rte_eth_rxconf))
    );
    assert_eq!(
        ::std::mem::align_of::<rte_eth_rxconf>(),
        8usize,
        concat!("Alignment of ", stringify!(rte_eth_rxconf))
    );
    fn test_field_rx_thresh() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<rte_eth_rxconf>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).rx_thresh) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(rte_eth_rxconf),
                "::",
                stringify!(rx_thresh)
            )
        );
    }
    test_field_rx_thresh();
    fn test_field_rx_free_thresh() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<rte_eth_rxconf>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).rx_free_thresh) as usize - ptr as usize
            },
            4usize,
            concat!(
                "Offset of field: ",
                stringify!(rte_eth_rxconf),
                "::",
                stringify!(rx_free_thresh)
            )
        );
    }
    test_field_rx_free_thresh();
    fn test_field_rx_drop_en() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<rte_eth_rxconf>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).rx_drop_en) as usize - ptr as usize
            },
            6usize,
            concat!(
                "Offset of field: ",
                stringify!(rte_eth_rxconf),
                "::",
                stringify!(rx_drop_en)
            )
        );
    }
    test_field_rx_drop_en();
    fn test_field_rx_deferred_start() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<rte_eth_rxconf>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).rx_deferred_start) as usize - ptr as usize
            },
            7usize,
            concat!(
                "Offset of field: ",
                stringify!(rte_eth_rxconf),
                "::",
                stringify!(rx_deferred_start)
            )
        );
    }
    test_field_rx_deferred_start();
    fn test_field_rx_nseg() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<rte_eth_rxconf>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).rx_nseg) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(rte_eth_rxconf),
                "::",
                stringify!(rx_nseg)
            )
        );
    }
    test_field_rx_nseg();
    fn test_field_share_group() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<rte_eth_rxconf>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).share_group) as usize - ptr as usize
            },
            10usize,
            concat!(
                "Offset of field: ",
                stringify!(rte_eth_rxconf),
                "::",
                stringify!(share_group)
            )
        );
    }
    test_field_share_group();
    fn test_field_share_qid() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<rte_eth_rxconf>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).share_qid) as usize - ptr as usize
            },
            12usize,
            concat!(
                "Offset of field: ",
                stringify!(rte_eth_rxconf),
                "::",
                stringify!(share_qid)
            )
        );
    }
    test_field_share_qid();
    fn test_field_offloads() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<rte_eth_rxconf>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).offloads) as usize - ptr as usize
            },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(rte_eth_rxconf),
                "::",
                stringify!(offloads)
            )
        );
    }
    test_field_offloads();
    fn test_field_rx_seg() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<rte_eth_rxconf>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).rx_seg) as usize - ptr as usize
            },
            24usize,
            concat!(
                "Offset of field: ",
                stringify!(rte_eth_rxconf),
                "::",
                stringify!(rx_seg)
            )
        );
    }
    test_field_rx_seg();
    fn test_field_rx_mempools() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<rte_eth_rxconf>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).rx_mempools) as usize - ptr as usize
            },
            32usize,
            concat!(
                "Offset of field: ",
                stringify!(rte_eth_rxconf),
                "::",
                stringify!(rx_mempools)
            )
        );
    }
    test_field_rx_mempools();
    fn test_field_rx_nmempool() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<rte_eth_rxconf>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).rx_nmempool) as usize - ptr as usize
            },
            40usize,
            concat!(
                "Offset of field: ",
                stringify!(rte_eth_rxconf),
                "::",
                stringify!(rx_nmempool)
            )
        );
    }
    test_field_rx_nmempool();
    fn test_field_reserved_64s() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<rte_eth_rxconf>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).reserved_64s) as usize - ptr as usize
            },
            48usize,
            concat!(
                "Offset of field: ",
                stringify!(rte_eth_rxconf),
                "::",
                stringify!(reserved_64s)
            )
        );
    }
    test_field_reserved_64s();
    fn test_field_reserved_ptrs() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<rte_eth_rxconf>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).reserved_ptrs) as usize - ptr as usize
            },
            64usize,
            concat!(
                "Offset of field: ",
                stringify!(rte_eth_rxconf),
                "::",
                stringify!(reserved_ptrs)
            )
        );
    }
    test_field_reserved_ptrs();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rte_eth_txconf {
    pub tx_thresh: rte_eth_thresh,
    pub tx_rs_thresh: u16,
    pub tx_free_thresh: u16,
    pub tx_deferred_start: u8,
    pub offloads: u64,
    pub reserved_64s: [u64; 2usize],
    pub reserved_ptrs: [*mut ::std::os::raw::c_void; 2usize],
}
#[test]
fn bindgen_test_layout_rte_eth_txconf() {
    assert_eq!(
        ::std::mem::size_of::<rte_eth_txconf>(),
        56usize,
        concat!("Size of: ", stringify!(rte_eth_txconf))
    );
    assert_eq!(
        ::std::mem::align_of::<rte_eth_txconf>(),
        8usize,
        concat!("Alignment of ", stringify!(rte_eth_txconf))
    );
    fn test_field_tx_thresh() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<rte_eth_txconf>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).tx_thresh) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(rte_eth_txconf),
                "::",
                stringify!(tx_thresh)
            )
        );
    }
    test_field_tx_thresh();
    fn test_field_tx_rs_thresh() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<rte_eth_txconf>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).tx_rs_thresh) as usize - ptr as usize
            },
            4usize,
            concat!(
                "Offset of field: ",
                stringify!(rte_eth_txconf),
                "::",
                stringify!(tx_rs_thresh)
            )
        );
    }
    test_field_tx_rs_thresh();
    fn test_field_tx_free_thresh() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<rte_eth_txconf>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).tx_free_thresh) as usize - ptr as usize
            },
            6usize,
            concat!(
                "Offset of field: ",
                stringify!(rte_eth_txconf),
                "::",
                stringify!(tx_free_thresh)
            )
        );
    }
    test_field_tx_free_thresh();
    fn test_field_tx_deferred_start() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<rte_eth_txconf>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).tx_deferred_start) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(rte_eth_txconf),
                "::",
                stringify!(tx_deferred_start)
            )
        );
    }
    test_field_tx_deferred_start();
    fn test_field_offloads() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<rte_eth_txconf>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).offloads) as usize - ptr as usize
            },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(rte_eth_txconf),
                "::",
                stringify!(offloads)
            )
        );
    }
    test_field_offloads();
    fn test_field_reserved_64s() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<rte_eth_txconf>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).reserved_64s) as usize - ptr as usize
            },
            24usize,
            concat!(
                "Offset of field: ",
                stringify!(rte_eth_txconf),
                "::",
                stringify!(reserved_64s)
            )
        );
    }
    test_field_reserved_64s();
    fn test_field_reserved_ptrs() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<rte_eth_txconf>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).reserved_ptrs) as usize - ptr as usize
            },
            40usize,
            concat!(
                "Offset of field: ",
                stringify!(rte_eth_txconf),
                "::",
                stringify!(reserved_ptrs)
            )
        );
    }
    test_field_reserved_ptrs();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rte_eth_desc_lim {
    pub nb_max: u16,
    pub nb_min: u16,
    pub nb_align: u16,
    pub nb_seg_max: u16,
    pub nb_mtu_seg_max: u16,
}
#[test]
fn bindgen_test_layout_rte_eth_desc_lim() {
    assert_eq!(
        ::std::mem::size_of::<rte_eth_desc_lim>(),
        10usize,
        concat!("Size of: ", stringify!(rte_eth_desc_lim))
    );
    assert_eq!(
        ::std::mem::align_of::<rte_eth_desc_lim>(),
        2usize,
        concat!("Alignment of ", stringify!(rte_eth_desc_lim))
    );
    fn test_field_nb_max() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<rte_eth_desc_lim>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).nb_max) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(rte_eth_desc_lim),
                "::",
                stringify!(nb_max)
            )
        );
    }
    test_field_nb_max();
    fn test_field_nb_min() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<rte_eth_desc_lim>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).nb_min) as usize - ptr as usize
            },
            2usize,
            concat!(
                "Offset of field: ",
                stringify!(rte_eth_desc_lim),
                "::",
                stringify!(nb_min)
            )
        );
    }
    test_field_nb_min();
    fn test_field_nb_align() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<rte_eth_desc_lim>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).nb_align) as usize - ptr as usize
            },
            4usize,
            concat!(
                "Offset of field: ",
                stringify!(rte_eth_desc_lim),
                "::",
                stringify!(nb_align)
            )
        );
    }
    test_field_nb_align();
    fn test_field_nb_seg_max() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<rte_eth_desc_lim>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).nb_seg_max) as usize - ptr as usize
            },
            6usize,
            concat!(
                "Offset of field: ",
                stringify!(rte_eth_desc_lim),
                "::",
                stringify!(nb_seg_max)
            )
        );
    }
    test_field_nb_seg_max();
    fn test_field_nb_mtu_seg_max() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<rte_eth_desc_lim>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).nb_mtu_seg_max) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(rte_eth_desc_lim),
                "::",
                stringify!(nb_mtu_seg_max)
            )
        );
    }
    test_field_nb_mtu_seg_max();
}
pub const rte_eth_fc_mode_RTE_ETH_FC_NONE: rte_eth_fc_mode = 0;
pub const rte_eth_fc_mode_RTE_ETH_FC_RX_PAUSE: rte_eth_fc_mode = 1;
pub const rte_eth_fc_mode_RTE_ETH_FC_TX_PAUSE: rte_eth_fc_mode = 2;
pub const rte_eth_fc_mode_RTE_ETH_FC_FULL: rte_eth_fc_mode = 3;
pub type rte_eth_fc_mode = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rte_eth_fc_conf {
    pub high_water: u32,
    pub low_water: u32,
    pub pause_time: u16,
    pub send_xon: u16,
    pub mode: rte_eth_fc_mode,
    pub mac_ctrl_frame_fwd: u8,
    pub autoneg: u8,
}
#[test]
fn bindgen_test_layout_rte_eth_fc_conf() {
    assert_eq!(
        ::std::mem::size_of::<rte_eth_fc_conf>(),
        20usize,
        concat!("Size of: ", stringify!(rte_eth_fc_conf))
    );
    assert_eq!(
        ::std::mem::align_of::<rte_eth_fc_conf>(),
        4usize,
        concat!("Alignment of ", stringify!(rte_eth_fc_conf))
    );
    fn test_field_high_water() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<rte_eth_fc_conf>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).high_water) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(rte_eth_fc_conf),
                "::",
                stringify!(high_water)
            )
        );
    }
    test_field_high_water();
    fn test_field_low_water() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<rte_eth_fc_conf>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).low_water) as usize - ptr as usize
            },
            4usize,
            concat!(
                "Offset of field: ",
                stringify!(rte_eth_fc_conf),
                "::",
                stringify!(low_water)
            )
        );
    }
    test_field_low_water();
    fn test_field_pause_time() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<rte_eth_fc_conf>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).pause_time) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(rte_eth_fc_conf),
                "::",
                stringify!(pause_time)
            )
        );
    }
    test_field_pause_time();
    fn test_field_send_xon() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<rte_eth_fc_conf>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).send_xon) as usize - ptr as usize
            },
            10usize,
            concat!(
                "Offset of field: ",
                stringify!(rte_eth_fc_conf),
                "::",
                stringify!(send_xon)
            )
        );
    }
    test_field_send_xon();
    fn test_field_mode() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<rte_eth_fc_conf>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).mode) as usize - ptr as usize
            },
            12usize,
            concat!("Offset of field: ", stringify!(rte_eth_fc_conf), "::", stringify!(mode))
        );
    }
    test_field_mode();
    fn test_field_mac_ctrl_frame_fwd() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<rte_eth_fc_conf>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).mac_ctrl_frame_fwd) as usize - ptr as usize
            },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(rte_eth_fc_conf),
                "::",
                stringify!(mac_ctrl_frame_fwd)
            )
        );
    }
    test_field_mac_ctrl_frame_fwd();
    fn test_field_autoneg() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<rte_eth_fc_conf>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).autoneg) as usize - ptr as usize
            },
            17usize,
            concat!(
                "Offset of field: ",
                stringify!(rte_eth_fc_conf),
                "::",
                stringify!(autoneg)
            )
        );
    }
    test_field_autoneg();
}
#[repr(C, packed)]
#[derive(Copy, Clone)]
pub struct rte_memzone {
    pub name: [::std::os::raw::c_char; 32usize],
    pub iova: rte_iova_t,
    pub __bindgen_anon_1: rte_memzone__bindgen_ty_1,
    pub len: size_t,
    pub hugepage_sz: u64,
    pub socket_id: i32,
    pub flags: u32,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union rte_memzone__bindgen_ty_1 {
    pub addr: *mut ::std::os::raw::c_void,
    pub addr_64: u64,
}
#[test]
fn bindgen_test_layout_rte_memzone__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<rte_memzone__bindgen_ty_1>(),
        8usize,
        concat!("Size of: ", stringify!(rte_memzone__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<rte_memzone__bindgen_ty_1>(),
        8usize,
        concat!("Alignment of ", stringify!(rte_memzone__bindgen_ty_1))
    );
    fn test_field_addr() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<rte_memzone__bindgen_ty_1>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).addr) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(rte_memzone__bindgen_ty_1),
                "::",
                stringify!(addr)
            )
        );
    }
    test_field_addr();
    fn test_field_addr_64() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<rte_memzone__bindgen_ty_1>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).addr_64) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(rte_memzone__bindgen_ty_1),
                "::",
                stringify!(addr_64)
            )
        );
    }
    test_field_addr_64();
}
#[test]
fn bindgen_test_layout_rte_memzone() {
    assert_eq!(
        ::std::mem::size_of::<rte_memzone>(),
        72usize,
        concat!("Size of: ", stringify!(rte_memzone))
    );
    assert_eq!(
        ::std::mem::align_of::<rte_memzone>(),
        1usize,
        concat!("Alignment of ", stringify!(rte_memzone))
    );
    fn test_field_name() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<rte_memzone>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).name) as usize - ptr as usize
            },
            0usize,
            concat!("Offset of field: ", stringify!(rte_memzone), "::", stringify!(name))
        );
    }
    test_field_name();
    fn test_field_iova() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<rte_memzone>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).iova) as usize - ptr as usize
            },
            32usize,
            concat!("Offset of field: ", stringify!(rte_memzone), "::", stringify!(iova))
        );
    }
    test_field_iova();
    fn test_field_len() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<rte_memzone>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).len) as usize - ptr as usize
            },
            48usize,
            concat!("Offset of field: ", stringify!(rte_memzone), "::", stringify!(len))
        );
    }
    test_field_len();
    fn test_field_hugepage_sz() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<rte_memzone>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).hugepage_sz) as usize - ptr as usize
            },
            56usize,
            concat!(
                "Offset of field: ",
                stringify!(rte_memzone),
                "::",
                stringify!(hugepage_sz)
            )
        );
    }
    test_field_hugepage_sz();
    fn test_field_socket_id() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<rte_memzone>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).socket_id) as usize - ptr as usize
            },
            64usize,
            concat!(
                "Offset of field: ",
                stringify!(rte_memzone),
                "::",
                stringify!(socket_id)
            )
        );
    }
    test_field_socket_id();
    fn test_field_flags() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<rte_memzone>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).flags) as usize - ptr as usize
            },
            68usize,
            concat!("Offset of field: ", stringify!(rte_memzone), "::", stringify!(flags))
        );
    }
    test_field_flags();
}
#[repr(C)]
#[repr(align(64))]
#[derive(Debug, Copy, Clone)]
pub struct rte_mempool_cache {
    pub size: u32,
    pub flushthresh: u32,
    pub len: u32,
    pub __bindgen_padding_0: [u64; 6usize],
    pub objs: [*mut ::std::os::raw::c_void; 1024usize],
}
#[test]
fn bindgen_test_layout_rte_mempool_cache() {
    assert_eq!(
        ::std::mem::size_of::<rte_mempool_cache>(),
        8256usize,
        concat!("Size of: ", stringify!(rte_mempool_cache))
    );
    assert_eq!(
        ::std::mem::align_of::<rte_mempool_cache>(),
        64usize,
        concat!("Alignment of ", stringify!(rte_mempool_cache))
    );
    fn test_field_size() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<rte_mempool_cache>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).size) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(rte_mempool_cache),
                "::",
                stringify!(size)
            )
        );
    }
    test_field_size();
    fn test_field_flushthresh() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<rte_mempool_cache>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).flushthresh) as usize - ptr as usize
            },
            4usize,
            concat!(
                "Offset of field: ",
                stringify!(rte_mempool_cache),
                "::",
                stringify!(flushthresh)
            )
        );
    }
    test_field_flushthresh();
    fn test_field_len() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<rte_mempool_cache>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).len) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(rte_mempool_cache),
                "::",
                stringify!(len)
            )
        );
    }
    test_field_len();
    fn test_field_objs() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<rte_mempool_cache>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).objs) as usize - ptr as usize
            },
            64usize,
            concat!(
                "Offset of field: ",
                stringify!(rte_mempool_cache),
                "::",
                stringify!(objs)
            )
        );
    }
    test_field_objs();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rte_mempool_objhdr {
    pub next: rte_mempool_objhdr__bindgen_ty_1,
    pub mp: *mut rte_mempool,
    pub iova: rte_iova_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rte_mempool_objhdr__bindgen_ty_1 {
    pub stqe_next: *mut rte_mempool_objhdr,
}
#[test]
fn bindgen_test_layout_rte_mempool_objhdr__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<rte_mempool_objhdr__bindgen_ty_1>(),
        8usize,
        concat!("Size of: ", stringify!(rte_mempool_objhdr__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<rte_mempool_objhdr__bindgen_ty_1>(),
        8usize,
        concat!("Alignment of ", stringify!(rte_mempool_objhdr__bindgen_ty_1))
    );
    fn test_field_stqe_next() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<rte_mempool_objhdr__bindgen_ty_1>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).stqe_next) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(rte_mempool_objhdr__bindgen_ty_1),
                "::",
                stringify!(stqe_next)
            )
        );
    }
    test_field_stqe_next();
}
#[test]
fn bindgen_test_layout_rte_mempool_objhdr() {
    assert_eq!(
        ::std::mem::size_of::<rte_mempool_objhdr>(),
        24usize,
        concat!("Size of: ", stringify!(rte_mempool_objhdr))
    );
    assert_eq!(
        ::std::mem::align_of::<rte_mempool_objhdr>(),
        8usize,
        concat!("Alignment of ", stringify!(rte_mempool_objhdr))
    );
    fn test_field_next() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<rte_mempool_objhdr>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).next) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(rte_mempool_objhdr),
                "::",
                stringify!(next)
            )
        );
    }
    test_field_next();
    fn test_field_mp() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<rte_mempool_objhdr>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).mp) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(rte_mempool_objhdr),
                "::",
                stringify!(mp)
            )
        );
    }
    test_field_mp();
    fn test_field_iova() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<rte_mempool_objhdr>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).iova) as usize - ptr as usize
            },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(rte_mempool_objhdr),
                "::",
                stringify!(iova)
            )
        );
    }
    test_field_iova();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rte_mempool_objhdr_list {
    pub stqh_first: *mut rte_mempool_objhdr,
    pub stqh_last: *mut *mut rte_mempool_objhdr,
}
#[test]
fn bindgen_test_layout_rte_mempool_objhdr_list() {
    assert_eq!(
        ::std::mem::size_of::<rte_mempool_objhdr_list>(),
        16usize,
        concat!("Size of: ", stringify!(rte_mempool_objhdr_list))
    );
    assert_eq!(
        ::std::mem::align_of::<rte_mempool_objhdr_list>(),
        8usize,
        concat!("Alignment of ", stringify!(rte_mempool_objhdr_list))
    );
    fn test_field_stqh_first() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<rte_mempool_objhdr_list>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).stqh_first) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(rte_mempool_objhdr_list),
                "::",
                stringify!(stqh_first)
            )
        );
    }
    test_field_stqh_first();
    fn test_field_stqh_last() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<rte_mempool_objhdr_list>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).stqh_last) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(rte_mempool_objhdr_list),
                "::",
                stringify!(stqh_last)
            )
        );
    }
    test_field_stqh_last();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rte_mempool_memhdr_list {
    pub stqh_first: *mut rte_mempool_memhdr,
    pub stqh_last: *mut *mut rte_mempool_memhdr,
}
#[test]
fn bindgen_test_layout_rte_mempool_memhdr_list() {
    assert_eq!(
        ::std::mem::size_of::<rte_mempool_memhdr_list>(),
        16usize,
        concat!("Size of: ", stringify!(rte_mempool_memhdr_list))
    );
    assert_eq!(
        ::std::mem::align_of::<rte_mempool_memhdr_list>(),
        8usize,
        concat!("Alignment of ", stringify!(rte_mempool_memhdr_list))
    );
    fn test_field_stqh_first() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<rte_mempool_memhdr_list>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).stqh_first) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(rte_mempool_memhdr_list),
                "::",
                stringify!(stqh_first)
            )
        );
    }
    test_field_stqh_first();
    fn test_field_stqh_last() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<rte_mempool_memhdr_list>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).stqh_last) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(rte_mempool_memhdr_list),
                "::",
                stringify!(stqh_last)
            )
        );
    }
    test_field_stqh_last();
}
pub type rte_mempool_memchunk_free_cb_t =
    ::std::option::Option<unsafe extern "C" fn(memhdr: *mut rte_mempool_memhdr, opaque: *mut ::std::os::raw::c_void)>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rte_mempool_memhdr {
    pub next: rte_mempool_memhdr__bindgen_ty_1,
    pub mp: *mut rte_mempool,
    pub addr: *mut ::std::os::raw::c_void,
    pub iova: rte_iova_t,
    pub len: size_t,
    pub free_cb: rte_mempool_memchunk_free_cb_t,
    pub opaque: *mut ::std::os::raw::c_void,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rte_mempool_memhdr__bindgen_ty_1 {
    pub stqe_next: *mut rte_mempool_memhdr,
}
#[test]
fn bindgen_test_layout_rte_mempool_memhdr__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<rte_mempool_memhdr__bindgen_ty_1>(),
        8usize,
        concat!("Size of: ", stringify!(rte_mempool_memhdr__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<rte_mempool_memhdr__bindgen_ty_1>(),
        8usize,
        concat!("Alignment of ", stringify!(rte_mempool_memhdr__bindgen_ty_1))
    );
    fn test_field_stqe_next() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<rte_mempool_memhdr__bindgen_ty_1>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).stqe_next) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(rte_mempool_memhdr__bindgen_ty_1),
                "::",
                stringify!(stqe_next)
            )
        );
    }
    test_field_stqe_next();
}
#[test]
fn bindgen_test_layout_rte_mempool_memhdr() {
    assert_eq!(
        ::std::mem::size_of::<rte_mempool_memhdr>(),
        56usize,
        concat!("Size of: ", stringify!(rte_mempool_memhdr))
    );
    assert_eq!(
        ::std::mem::align_of::<rte_mempool_memhdr>(),
        8usize,
        concat!("Alignment of ", stringify!(rte_mempool_memhdr))
    );
    fn test_field_next() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<rte_mempool_memhdr>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).next) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(rte_mempool_memhdr),
                "::",
                stringify!(next)
            )
        );
    }
    test_field_next();
    fn test_field_mp() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<rte_mempool_memhdr>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).mp) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(rte_mempool_memhdr),
                "::",
                stringify!(mp)
            )
        );
    }
    test_field_mp();
    fn test_field_addr() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<rte_mempool_memhdr>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).addr) as usize - ptr as usize
            },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(rte_mempool_memhdr),
                "::",
                stringify!(addr)
            )
        );
    }
    test_field_addr();
    fn test_field_iova() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<rte_mempool_memhdr>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).iova) as usize - ptr as usize
            },
            24usize,
            concat!(
                "Offset of field: ",
                stringify!(rte_mempool_memhdr),
                "::",
                stringify!(iova)
            )
        );
    }
    test_field_iova();
    fn test_field_len() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<rte_mempool_memhdr>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).len) as usize - ptr as usize
            },
            32usize,
            concat!(
                "Offset of field: ",
                stringify!(rte_mempool_memhdr),
                "::",
                stringify!(len)
            )
        );
    }
    test_field_len();
    fn test_field_free_cb() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<rte_mempool_memhdr>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).free_cb) as usize - ptr as usize
            },
            40usize,
            concat!(
                "Offset of field: ",
                stringify!(rte_mempool_memhdr),
                "::",
                stringify!(free_cb)
            )
        );
    }
    test_field_free_cb();
    fn test_field_opaque() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<rte_mempool_memhdr>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).opaque) as usize - ptr as usize
            },
            48usize,
            concat!(
                "Offset of field: ",
                stringify!(rte_mempool_memhdr),
                "::",
                stringify!(opaque)
            )
        );
    }
    test_field_opaque();
}
#[repr(C)]
#[repr(align(64))]
#[derive(Copy, Clone)]
pub struct rte_mempool {
    pub name: [::std::os::raw::c_char; 26usize],
    pub __bindgen_anon_1: rte_mempool__bindgen_ty_1,
    pub pool_config: *mut ::std::os::raw::c_void,
    pub mz: *const rte_memzone,
    pub flags: ::std::os::raw::c_uint,
    pub socket_id: ::std::os::raw::c_int,
    pub size: u32,
    pub cache_size: u32,
    pub elt_size: u32,
    pub header_size: u32,
    pub trailer_size: u32,
    pub private_data_size: ::std::os::raw::c_uint,
    pub ops_index: i32,
    pub local_cache: *mut rte_mempool_cache,
    pub populated_size: u32,
    pub elt_list: rte_mempool_objhdr_list,
    pub nb_mem_chunks: u32,
    pub mem_list: rte_mempool_memhdr_list,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union rte_mempool__bindgen_ty_1 {
    pub pool_data: *mut ::std::os::raw::c_void,
    pub pool_id: u64,
}
#[test]
fn bindgen_test_layout_rte_mempool__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<rte_mempool__bindgen_ty_1>(),
        8usize,
        concat!("Size of: ", stringify!(rte_mempool__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<rte_mempool__bindgen_ty_1>(),
        8usize,
        concat!("Alignment of ", stringify!(rte_mempool__bindgen_ty_1))
    );
    fn test_field_pool_data() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<rte_mempool__bindgen_ty_1>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).pool_data) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(rte_mempool__bindgen_ty_1),
                "::",
                stringify!(pool_data)
            )
        );
    }
    test_field_pool_data();
    fn test_field_pool_id() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<rte_mempool__bindgen_ty_1>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).pool_id) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(rte_mempool__bindgen_ty_1),
                "::",
                stringify!(pool_id)
            )
        );
    }
    test_field_pool_id();
}
#[test]
fn bindgen_test_layout_rte_mempool() {
    assert_eq!(
        ::std::mem::size_of::<rte_mempool>(),
        192usize,
        concat!("Size of: ", stringify!(rte_mempool))
    );
    assert_eq!(
        ::std::mem::align_of::<rte_mempool>(),
        64usize,
        concat!("Alignment of ", stringify!(rte_mempool))
    );
    fn test_field_name() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<rte_mempool>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).name) as usize - ptr as usize
            },
            0usize,
            concat!("Offset of field: ", stringify!(rte_mempool), "::", stringify!(name))
        );
    }
    test_field_name();
    fn test_field_pool_config() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<rte_mempool>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).pool_config) as usize - ptr as usize
            },
            40usize,
            concat!(
                "Offset of field: ",
                stringify!(rte_mempool),
                "::",
                stringify!(pool_config)
            )
        );
    }
    test_field_pool_config();
    fn test_field_mz() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<rte_mempool>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).mz) as usize - ptr as usize
            },
            48usize,
            concat!("Offset of field: ", stringify!(rte_mempool), "::", stringify!(mz))
        );
    }
    test_field_mz();
    fn test_field_flags() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<rte_mempool>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).flags) as usize - ptr as usize
            },
            56usize,
            concat!("Offset of field: ", stringify!(rte_mempool), "::", stringify!(flags))
        );
    }
    test_field_flags();
    fn test_field_socket_id() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<rte_mempool>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).socket_id) as usize - ptr as usize
            },
            60usize,
            concat!(
                "Offset of field: ",
                stringify!(rte_mempool),
                "::",
                stringify!(socket_id)
            )
        );
    }
    test_field_socket_id();
    fn test_field_size() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<rte_mempool>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).size) as usize - ptr as usize
            },
            64usize,
            concat!("Offset of field: ", stringify!(rte_mempool), "::", stringify!(size))
        );
    }
    test_field_size();
    fn test_field_cache_size() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<rte_mempool>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).cache_size) as usize - ptr as usize
            },
            68usize,
            concat!(
                "Offset of field: ",
                stringify!(rte_mempool),
                "::",
                stringify!(cache_size)
            )
        );
    }
    test_field_cache_size();
    fn test_field_elt_size() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<rte_mempool>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).elt_size) as usize - ptr as usize
            },
            72usize,
            concat!("Offset of field: ", stringify!(rte_mempool), "::", stringify!(elt_size))
        );
    }
    test_field_elt_size();
    fn test_field_header_size() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<rte_mempool>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).header_size) as usize - ptr as usize
            },
            76usize,
            concat!(
                "Offset of field: ",
                stringify!(rte_mempool),
                "::",
                stringify!(header_size)
            )
        );
    }
    test_field_header_size();
    fn test_field_trailer_size() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<rte_mempool>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).trailer_size) as usize - ptr as usize
            },
            80usize,
            concat!(
                "Offset of field: ",
                stringify!(rte_mempool),
                "::",
                stringify!(trailer_size)
            )
        );
    }
    test_field_trailer_size();
    fn test_field_private_data_size() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<rte_mempool>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).private_data_size) as usize - ptr as usize
            },
            84usize,
            concat!(
                "Offset of field: ",
                stringify!(rte_mempool),
                "::",
                stringify!(private_data_size)
            )
        );
    }
    test_field_private_data_size();
    fn test_field_ops_index() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<rte_mempool>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).ops_index) as usize - ptr as usize
            },
            88usize,
            concat!(
                "Offset of field: ",
                stringify!(rte_mempool),
                "::",
                stringify!(ops_index)
            )
        );
    }
    test_field_ops_index();
    fn test_field_local_cache() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<rte_mempool>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).local_cache) as usize - ptr as usize
            },
            96usize,
            concat!(
                "Offset of field: ",
                stringify!(rte_mempool),
                "::",
                stringify!(local_cache)
            )
        );
    }
    test_field_local_cache();
    fn test_field_populated_size() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<rte_mempool>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).populated_size) as usize - ptr as usize
            },
            104usize,
            concat!(
                "Offset of field: ",
                stringify!(rte_mempool),
                "::",
                stringify!(populated_size)
            )
        );
    }
    test_field_populated_size();
    fn test_field_elt_list() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<rte_mempool>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).elt_list) as usize - ptr as usize
            },
            112usize,
            concat!("Offset of field: ", stringify!(rte_mempool), "::", stringify!(elt_list))
        );
    }
    test_field_elt_list();
    fn test_field_nb_mem_chunks() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<rte_mempool>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).nb_mem_chunks) as usize - ptr as usize
            },
            128usize,
            concat!(
                "Offset of field: ",
                stringify!(rte_mempool),
                "::",
                stringify!(nb_mem_chunks)
            )
        );
    }
    test_field_nb_mem_chunks();
    fn test_field_mem_list() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<rte_mempool>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).mem_list) as usize - ptr as usize
            },
            136usize,
            concat!("Offset of field: ", stringify!(rte_mempool), "::", stringify!(mem_list))
        );
    }
    test_field_mem_list();
}
pub type rte_mempool_obj_cb_t = ::std::option::Option<
    unsafe extern "C" fn(
        mp: *mut rte_mempool,
        opaque: *mut ::std::os::raw::c_void,
        obj: *mut ::std::os::raw::c_void,
        obj_idx: ::std::os::raw::c_uint,
    ),
>;
pub type rte_mempool_mem_cb_t = ::std::option::Option<
    unsafe extern "C" fn(
        mp: *mut rte_mempool,
        opaque: *mut ::std::os::raw::c_void,
        memhdr: *mut rte_mempool_memhdr,
        mem_idx: ::std::os::raw::c_uint,
    ),
>;
extern "C" {
    pub fn rte_mempool_create_empty(
        name: *const ::std::os::raw::c_char,
        n: ::std::os::raw::c_uint,
        elt_size: ::std::os::raw::c_uint,
        cache_size: ::std::os::raw::c_uint,
        private_data_size: ::std::os::raw::c_uint,
        socket_id: ::std::os::raw::c_int,
        flags: ::std::os::raw::c_uint,
    ) -> *mut rte_mempool;
}
extern "C" {
    pub fn rte_mempool_free(mp: *mut rte_mempool);
}
extern "C" {
    pub fn rte_mempool_populate_default(mp: *mut rte_mempool) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rte_mempool_obj_iter(
        mp: *mut rte_mempool,
        obj_cb: rte_mempool_obj_cb_t,
        obj_cb_arg: *mut ::std::os::raw::c_void,
    ) -> u32;
}
extern "C" {
    pub fn rte_mempool_mem_iter(
        mp: *mut rte_mempool,
        mem_cb: rte_mempool_mem_cb_t,
        mem_cb_arg: *mut ::std::os::raw::c_void,
    ) -> u32;
}
extern "C" {
    pub fn rte_mempool_avail_count(mp: *const rte_mempool) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn rte_mempool_in_use_count(mp: *const rte_mempool) -> ::std::os::raw::c_uint;
}
pub type rte_be16_t = u16;
pub type rte_be32_t = u32;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rte_mbuf_sched {
    pub queue_id: u32,
    pub traffic_class: u8,
    pub color: u8,
    pub reserved: u16,
}
#[test]
fn bindgen_test_layout_rte_mbuf_sched() {
    assert_eq!(
        ::std::mem::size_of::<rte_mbuf_sched>(),
        8usize,
        concat!("Size of: ", stringify!(rte_mbuf_sched))
    );
    assert_eq!(
        ::std::mem::align_of::<rte_mbuf_sched>(),
        4usize,
        concat!("Alignment of ", stringify!(rte_mbuf_sched))
    );
    fn test_field_queue_id() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<rte_mbuf_sched>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).queue_id) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(rte_mbuf_sched),
                "::",
                stringify!(queue_id)
            )
        );
    }
    test_field_queue_id();
    fn test_field_traffic_class() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<rte_mbuf_sched>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).traffic_class) as usize - ptr as usize
            },
            4usize,
            concat!(
                "Offset of field: ",
                stringify!(rte_mbuf_sched),
                "::",
                stringify!(traffic_class)
            )
        );
    }
    test_field_traffic_class();
    fn test_field_color() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<rte_mbuf_sched>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).color) as usize - ptr as usize
            },
            5usize,
            concat!("Offset of field: ", stringify!(rte_mbuf_sched), "::", stringify!(color))
        );
    }
    test_field_color();
    fn test_field_reserved() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<rte_mbuf_sched>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).reserved) as usize - ptr as usize
            },
            6usize,
            concat!(
                "Offset of field: ",
                stringify!(rte_mbuf_sched),
                "::",
                stringify!(reserved)
            )
        );
    }
    test_field_reserved();
}
#[repr(C)]
#[repr(align(64))]
pub struct rte_mbuf {
    pub cacheline0: RTE_MARKER,
    pub buf_addr: *mut ::std::os::raw::c_void,
    pub buf_iova: rte_iova_t,
    pub rearm_data: RTE_MARKER64,
    pub data_off: u16,
    pub refcnt: u16,
    pub nb_segs: u16,
    pub port: u16,
    pub ol_flags: u64,
    pub rx_descriptor_fields1: RTE_MARKER,
    pub __bindgen_anon_1: rte_mbuf__bindgen_ty_1,
    pub pkt_len: u32,
    pub data_len: u16,
    pub vlan_tci: u16,
    pub __bindgen_anon_2: rte_mbuf__bindgen_ty_2,
    pub vlan_tci_outer: u16,
    pub buf_len: u16,
    pub pool: *mut rte_mempool,
    pub cacheline1: RTE_MARKER,
    pub next: *mut rte_mbuf,
    pub __bindgen_anon_3: rte_mbuf__bindgen_ty_3,
    pub shinfo: *mut rte_mbuf_ext_shared_info,
    pub priv_size: u16,
    pub timesync: u16,
    pub dynfield1: [u32; 9usize],
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union rte_mbuf__bindgen_ty_1 {
    pub packet_type: u32,
    pub __bindgen_anon_1: rte_mbuf__bindgen_ty_1__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct rte_mbuf__bindgen_ty_1__bindgen_ty_1 {
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 2usize]>,
    pub __bindgen_anon_1: rte_mbuf__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1,
    pub _bitfield_align_2: [u8; 0],
    pub _bitfield_2: __BindgenBitfieldUnit<[u8; 1usize]>,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union rte_mbuf__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1 {
    pub inner_esp_next_proto: u8,
    pub __bindgen_anon_1: rte_mbuf__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1,
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct rte_mbuf__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1 {
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 1usize]>,
}
#[test]
fn bindgen_test_layout_rte_mbuf__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<rte_mbuf__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1>(),
        1usize,
        concat!(
            "Size of: ",
            stringify!(rte_mbuf__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<rte_mbuf__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1>(),
        1usize,
        concat!(
            "Alignment of ",
            stringify!(rte_mbuf__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1)
        )
    );
}
impl rte_mbuf__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1 {
    #[inline]
    pub fn inner_l2_type(&self) -> u8 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 4u8) as u8) }
    }
    #[inline]
    pub fn set_inner_l2_type(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 4u8, val as u64)
        }
    }
    #[inline]
    pub fn inner_l3_type(&self) -> u8 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(4usize, 4u8) as u8) }
    }
    #[inline]
    pub fn set_inner_l3_type(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(4usize, 4u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(inner_l2_type: u8, inner_l3_type: u8) -> __BindgenBitfieldUnit<[u8; 1usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 1usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 4u8, {
            let inner_l2_type: u8 = unsafe { ::std::mem::transmute(inner_l2_type) };
            inner_l2_type as u64
        });
        __bindgen_bitfield_unit.set(4usize, 4u8, {
            let inner_l3_type: u8 = unsafe { ::std::mem::transmute(inner_l3_type) };
            inner_l3_type as u64
        });
        __bindgen_bitfield_unit
    }
}
#[test]
fn bindgen_test_layout_rte_mbuf__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<rte_mbuf__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1>(),
        1usize,
        concat!(
            "Size of: ",
            stringify!(rte_mbuf__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<rte_mbuf__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1>(),
        1usize,
        concat!(
            "Alignment of ",
            stringify!(rte_mbuf__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1)
        )
    );
    fn test_field_inner_esp_next_proto() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<rte_mbuf__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).inner_esp_next_proto) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(rte_mbuf__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1),
                "::",
                stringify!(inner_esp_next_proto)
            )
        );
    }
    test_field_inner_esp_next_proto();
}
#[test]
fn bindgen_test_layout_rte_mbuf__bindgen_ty_1__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<rte_mbuf__bindgen_ty_1__bindgen_ty_1>(),
        4usize,
        concat!("Size of: ", stringify!(rte_mbuf__bindgen_ty_1__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<rte_mbuf__bindgen_ty_1__bindgen_ty_1>(),
        1usize,
        concat!("Alignment of ", stringify!(rte_mbuf__bindgen_ty_1__bindgen_ty_1))
    );
}
impl rte_mbuf__bindgen_ty_1__bindgen_ty_1 {
    #[inline]
    pub fn l2_type(&self) -> u8 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 4u8) as u8) }
    }
    #[inline]
    pub fn set_l2_type(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 4u8, val as u64)
        }
    }
    #[inline]
    pub fn l3_type(&self) -> u8 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(4usize, 4u8) as u8) }
    }
    #[inline]
    pub fn set_l3_type(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(4usize, 4u8, val as u64)
        }
    }
    #[inline]
    pub fn l4_type(&self) -> u8 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(8usize, 4u8) as u8) }
    }
    #[inline]
    pub fn set_l4_type(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(8usize, 4u8, val as u64)
        }
    }
    #[inline]
    pub fn tun_type(&self) -> u8 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(12usize, 4u8) as u8) }
    }
    #[inline]
    pub fn set_tun_type(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(12usize, 4u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(l2_type: u8, l3_type: u8, l4_type: u8, tun_type: u8) -> __BindgenBitfieldUnit<[u8; 2usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 2usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 4u8, {
            let l2_type: u8 = unsafe { ::std::mem::transmute(l2_type) };
            l2_type as u64
        });
        __bindgen_bitfield_unit.set(4usize, 4u8, {
            let l3_type: u8 = unsafe { ::std::mem::transmute(l3_type) };
            l3_type as u64
        });
        __bindgen_bitfield_unit.set(8usize, 4u8, {
            let l4_type: u8 = unsafe { ::std::mem::transmute(l4_type) };
            l4_type as u64
        });
        __bindgen_bitfield_unit.set(12usize, 4u8, {
            let tun_type: u8 = unsafe { ::std::mem::transmute(tun_type) };
            tun_type as u64
        });
        __bindgen_bitfield_unit
    }
    #[inline]
    pub fn inner_l4_type(&self) -> u8 {
        unsafe { ::std::mem::transmute(self._bitfield_2.get(0usize, 4u8) as u8) }
    }
    #[inline]
    pub fn set_inner_l4_type(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_2.set(0usize, 4u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_2(inner_l4_type: u8) -> __BindgenBitfieldUnit<[u8; 1usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 1usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 4u8, {
            let inner_l4_type: u8 = unsafe { ::std::mem::transmute(inner_l4_type) };
            inner_l4_type as u64
        });
        __bindgen_bitfield_unit
    }
}
#[test]
fn bindgen_test_layout_rte_mbuf__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<rte_mbuf__bindgen_ty_1>(),
        4usize,
        concat!("Size of: ", stringify!(rte_mbuf__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<rte_mbuf__bindgen_ty_1>(),
        4usize,
        concat!("Alignment of ", stringify!(rte_mbuf__bindgen_ty_1))
    );
    fn test_field_packet_type() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<rte_mbuf__bindgen_ty_1>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).packet_type) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(rte_mbuf__bindgen_ty_1),
                "::",
                stringify!(packet_type)
            )
        );
    }
    test_field_packet_type();
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union rte_mbuf__bindgen_ty_2 {
    pub hash: rte_mbuf__bindgen_ty_2__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union rte_mbuf__bindgen_ty_2__bindgen_ty_1 {
    pub rss: u32,
    pub fdir: rte_mbuf__bindgen_ty_2__bindgen_ty_1__bindgen_ty_1,
    pub sched: rte_mbuf_sched,
    pub txadapter: rte_mbuf__bindgen_ty_2__bindgen_ty_1__bindgen_ty_2,
    pub usr: u32,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct rte_mbuf__bindgen_ty_2__bindgen_ty_1__bindgen_ty_1 {
    pub __bindgen_anon_1: rte_mbuf__bindgen_ty_2__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1,
    pub hi: u32,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union rte_mbuf__bindgen_ty_2__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1 {
    pub __bindgen_anon_1: rte_mbuf__bindgen_ty_2__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1,
    pub lo: u32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rte_mbuf__bindgen_ty_2__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1 {
    pub hash: u16,
    pub id: u16,
}
#[test]
fn bindgen_test_layout_rte_mbuf__bindgen_ty_2__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<rte_mbuf__bindgen_ty_2__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1>(),
        4usize,
        concat!(
            "Size of: ",
            stringify!(rte_mbuf__bindgen_ty_2__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<rte_mbuf__bindgen_ty_2__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1>(),
        2usize,
        concat!(
            "Alignment of ",
            stringify!(rte_mbuf__bindgen_ty_2__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1)
        )
    );
    fn test_field_hash() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<
                    rte_mbuf__bindgen_ty_2__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1,
                >::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).hash) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(rte_mbuf__bindgen_ty_2__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1),
                "::",
                stringify!(hash)
            )
        );
    }
    test_field_hash();
    fn test_field_id() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<
                    rte_mbuf__bindgen_ty_2__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1,
                >::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).id) as usize - ptr as usize
            },
            2usize,
            concat!(
                "Offset of field: ",
                stringify!(rte_mbuf__bindgen_ty_2__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1),
                "::",
                stringify!(id)
            )
        );
    }
    test_field_id();
}
#[test]
fn bindgen_test_layout_rte_mbuf__bindgen_ty_2__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<rte_mbuf__bindgen_ty_2__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1>(),
        4usize,
        concat!(
            "Size of: ",
            stringify!(rte_mbuf__bindgen_ty_2__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<rte_mbuf__bindgen_ty_2__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(rte_mbuf__bindgen_ty_2__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1)
        )
    );
    fn test_field_lo() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<rte_mbuf__bindgen_ty_2__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1>::uninit(
                    );
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).lo) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(rte_mbuf__bindgen_ty_2__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1),
                "::",
                stringify!(lo)
            )
        );
    }
    test_field_lo();
}
#[test]
fn bindgen_test_layout_rte_mbuf__bindgen_ty_2__bindgen_ty_1__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<rte_mbuf__bindgen_ty_2__bindgen_ty_1__bindgen_ty_1>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(rte_mbuf__bindgen_ty_2__bindgen_ty_1__bindgen_ty_1)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<rte_mbuf__bindgen_ty_2__bindgen_ty_1__bindgen_ty_1>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(rte_mbuf__bindgen_ty_2__bindgen_ty_1__bindgen_ty_1)
        )
    );
    fn test_field_hi() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<rte_mbuf__bindgen_ty_2__bindgen_ty_1__bindgen_ty_1>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).hi) as usize - ptr as usize
            },
            4usize,
            concat!(
                "Offset of field: ",
                stringify!(rte_mbuf__bindgen_ty_2__bindgen_ty_1__bindgen_ty_1),
                "::",
                stringify!(hi)
            )
        );
    }
    test_field_hi();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rte_mbuf__bindgen_ty_2__bindgen_ty_1__bindgen_ty_2 {
    pub reserved1: u32,
    pub reserved2: u16,
    pub txq: u16,
}
#[test]
fn bindgen_test_layout_rte_mbuf__bindgen_ty_2__bindgen_ty_1__bindgen_ty_2() {
    assert_eq!(
        ::std::mem::size_of::<rte_mbuf__bindgen_ty_2__bindgen_ty_1__bindgen_ty_2>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(rte_mbuf__bindgen_ty_2__bindgen_ty_1__bindgen_ty_2)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<rte_mbuf__bindgen_ty_2__bindgen_ty_1__bindgen_ty_2>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(rte_mbuf__bindgen_ty_2__bindgen_ty_1__bindgen_ty_2)
        )
    );
    fn test_field_reserved1() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<rte_mbuf__bindgen_ty_2__bindgen_ty_1__bindgen_ty_2>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).reserved1) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(rte_mbuf__bindgen_ty_2__bindgen_ty_1__bindgen_ty_2),
                "::",
                stringify!(reserved1)
            )
        );
    }
    test_field_reserved1();
    fn test_field_reserved2() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<rte_mbuf__bindgen_ty_2__bindgen_ty_1__bindgen_ty_2>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).reserved2) as usize - ptr as usize
            },
            4usize,
            concat!(
                "Offset of field: ",
                stringify!(rte_mbuf__bindgen_ty_2__bindgen_ty_1__bindgen_ty_2),
                "::",
                stringify!(reserved2)
            )
        );
    }
    test_field_reserved2();
    fn test_field_txq() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<rte_mbuf__bindgen_ty_2__bindgen_ty_1__bindgen_ty_2>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).txq) as usize - ptr as usize
            },
            6usize,
            concat!(
                "Offset of field: ",
                stringify!(rte_mbuf__bindgen_ty_2__bindgen_ty_1__bindgen_ty_2),
                "::",
                stringify!(txq)
            )
        );
    }
    test_field_txq();
}
#[test]
fn bindgen_test_layout_rte_mbuf__bindgen_ty_2__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<rte_mbuf__bindgen_ty_2__bindgen_ty_1>(),
        8usize,
        concat!("Size of: ", stringify!(rte_mbuf__bindgen_ty_2__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<rte_mbuf__bindgen_ty_2__bindgen_ty_1>(),
        4usize,
        concat!("Alignment of ", stringify!(rte_mbuf__bindgen_ty_2__bindgen_ty_1))
    );
    fn test_field_rss() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<rte_mbuf__bindgen_ty_2__bindgen_ty_1>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).rss) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(rte_mbuf__bindgen_ty_2__bindgen_ty_1),
                "::",
                stringify!(rss)
            )
        );
    }
    test_field_rss();
    fn test_field_fdir() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<rte_mbuf__bindgen_ty_2__bindgen_ty_1>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).fdir) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(rte_mbuf__bindgen_ty_2__bindgen_ty_1),
                "::",
                stringify!(fdir)
            )
        );
    }
    test_field_fdir();
    fn test_field_sched() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<rte_mbuf__bindgen_ty_2__bindgen_ty_1>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).sched) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(rte_mbuf__bindgen_ty_2__bindgen_ty_1),
                "::",
                stringify!(sched)
            )
        );
    }
    test_field_sched();
    fn test_field_txadapter() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<rte_mbuf__bindgen_ty_2__bindgen_ty_1>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).txadapter) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(rte_mbuf__bindgen_ty_2__bindgen_ty_1),
                "::",
                stringify!(txadapter)
            )
        );
    }
    test_field_txadapter();
    fn test_field_usr() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<rte_mbuf__bindgen_ty_2__bindgen_ty_1>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).usr) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(rte_mbuf__bindgen_ty_2__bindgen_ty_1),
                "::",
                stringify!(usr)
            )
        );
    }
    test_field_usr();
}
#[test]
fn bindgen_test_layout_rte_mbuf__bindgen_ty_2() {
    assert_eq!(
        ::std::mem::size_of::<rte_mbuf__bindgen_ty_2>(),
        8usize,
        concat!("Size of: ", stringify!(rte_mbuf__bindgen_ty_2))
    );
    assert_eq!(
        ::std::mem::align_of::<rte_mbuf__bindgen_ty_2>(),
        4usize,
        concat!("Alignment of ", stringify!(rte_mbuf__bindgen_ty_2))
    );
    fn test_field_hash() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<rte_mbuf__bindgen_ty_2>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).hash) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(rte_mbuf__bindgen_ty_2),
                "::",
                stringify!(hash)
            )
        );
    }
    test_field_hash();
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union rte_mbuf__bindgen_ty_3 {
    pub tx_offload: u64,
    pub __bindgen_anon_1: rte_mbuf__bindgen_ty_3__bindgen_ty_1,
}
#[repr(C)]
#[repr(align(8))]
#[derive(Debug, Copy, Clone)]
pub struct rte_mbuf__bindgen_ty_3__bindgen_ty_1 {
    pub _bitfield_align_1: [u16; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 7usize]>,
}
#[test]
fn bindgen_test_layout_rte_mbuf__bindgen_ty_3__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<rte_mbuf__bindgen_ty_3__bindgen_ty_1>(),
        8usize,
        concat!("Size of: ", stringify!(rte_mbuf__bindgen_ty_3__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<rte_mbuf__bindgen_ty_3__bindgen_ty_1>(),
        8usize,
        concat!("Alignment of ", stringify!(rte_mbuf__bindgen_ty_3__bindgen_ty_1))
    );
}
impl rte_mbuf__bindgen_ty_3__bindgen_ty_1 {
    #[inline]
    pub fn l2_len(&self) -> u64 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 7u8) as u64) }
    }
    #[inline]
    pub fn set_l2_len(&mut self, val: u64) {
        unsafe {
            let val: u64 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 7u8, val as u64)
        }
    }
    #[inline]
    pub fn l3_len(&self) -> u64 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(7usize, 9u8) as u64) }
    }
    #[inline]
    pub fn set_l3_len(&mut self, val: u64) {
        unsafe {
            let val: u64 = ::std::mem::transmute(val);
            self._bitfield_1.set(7usize, 9u8, val as u64)
        }
    }
    #[inline]
    pub fn l4_len(&self) -> u64 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(16usize, 8u8) as u64) }
    }
    #[inline]
    pub fn set_l4_len(&mut self, val: u64) {
        unsafe {
            let val: u64 = ::std::mem::transmute(val);
            self._bitfield_1.set(16usize, 8u8, val as u64)
        }
    }
    #[inline]
    pub fn tso_segsz(&self) -> u64 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(24usize, 16u8) as u64) }
    }
    #[inline]
    pub fn set_tso_segsz(&mut self, val: u64) {
        unsafe {
            let val: u64 = ::std::mem::transmute(val);
            self._bitfield_1.set(24usize, 16u8, val as u64)
        }
    }
    #[inline]
    pub fn outer_l3_len(&self) -> u64 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(40usize, 9u8) as u64) }
    }
    #[inline]
    pub fn set_outer_l3_len(&mut self, val: u64) {
        unsafe {
            let val: u64 = ::std::mem::transmute(val);
            self._bitfield_1.set(40usize, 9u8, val as u64)
        }
    }
    #[inline]
    pub fn outer_l2_len(&self) -> u64 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(49usize, 7u8) as u64) }
    }
    #[inline]
    pub fn set_outer_l2_len(&mut self, val: u64) {
        unsafe {
            let val: u64 = ::std::mem::transmute(val);
            self._bitfield_1.set(49usize, 7u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        l2_len: u64,
        l3_len: u64,
        l4_len: u64,
        tso_segsz: u64,
        outer_l3_len: u64,
        outer_l2_len: u64,
    ) -> __BindgenBitfieldUnit<[u8; 7usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 7usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 7u8, {
            let l2_len: u64 = unsafe { ::std::mem::transmute(l2_len) };
            l2_len as u64
        });
        __bindgen_bitfield_unit.set(7usize, 9u8, {
            let l3_len: u64 = unsafe { ::std::mem::transmute(l3_len) };
            l3_len as u64
        });
        __bindgen_bitfield_unit.set(16usize, 8u8, {
            let l4_len: u64 = unsafe { ::std::mem::transmute(l4_len) };
            l4_len as u64
        });
        __bindgen_bitfield_unit.set(24usize, 16u8, {
            let tso_segsz: u64 = unsafe { ::std::mem::transmute(tso_segsz) };
            tso_segsz as u64
        });
        __bindgen_bitfield_unit.set(40usize, 9u8, {
            let outer_l3_len: u64 = unsafe { ::std::mem::transmute(outer_l3_len) };
            outer_l3_len as u64
        });
        __bindgen_bitfield_unit.set(49usize, 7u8, {
            let outer_l2_len: u64 = unsafe { ::std::mem::transmute(outer_l2_len) };
            outer_l2_len as u64
        });
        __bindgen_bitfield_unit
    }
}
#[test]
fn bindgen_test_layout_rte_mbuf__bindgen_ty_3() {
    assert_eq!(
        ::std::mem::size_of::<rte_mbuf__bindgen_ty_3>(),
        8usize,
        concat!("Size of: ", stringify!(rte_mbuf__bindgen_ty_3))
    );
    assert_eq!(
        ::std::mem::align_of::<rte_mbuf__bindgen_ty_3>(),
        8usize,
        concat!("Alignment of ", stringify!(rte_mbuf__bindgen_ty_3))
    );
    fn test_field_tx_offload() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<rte_mbuf__bindgen_ty_3>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).tx_offload) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(rte_mbuf__bindgen_ty_3),
                "::",
                stringify!(tx_offload)
            )
        );
    }
    test_field_tx_offload();
}
#[test]
fn bindgen_test_layout_rte_mbuf() {
    assert_eq!(
        ::std::mem::size_of::<rte_mbuf>(),
        128usize,
        concat!("Size of: ", stringify!(rte_mbuf))
    );
    assert_eq!(
        ::std::mem::align_of::<rte_mbuf>(),
        64usize,
        concat!("Alignment of ", stringify!(rte_mbuf))
    );
    fn test_field_cacheline0() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<rte_mbuf>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).cacheline0) as usize - ptr as usize
            },
            0usize,
            concat!("Offset of field: ", stringify!(rte_mbuf), "::", stringify!(cacheline0))
        );
    }
    test_field_cacheline0();
    fn test_field_buf_addr() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<rte_mbuf>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).buf_addr) as usize - ptr as usize
            },
            0usize,
            concat!("Offset of field: ", stringify!(rte_mbuf), "::", stringify!(buf_addr))
        );
    }
    test_field_buf_addr();
    fn test_field_buf_iova() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<rte_mbuf>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).buf_iova) as usize - ptr as usize
            },
            8usize,
            concat!("Offset of field: ", stringify!(rte_mbuf), "::", stringify!(buf_iova))
        );
    }
    test_field_buf_iova();
    fn test_field_rearm_data() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<rte_mbuf>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).rearm_data) as usize - ptr as usize
            },
            16usize,
            concat!("Offset of field: ", stringify!(rte_mbuf), "::", stringify!(rearm_data))
        );
    }
    test_field_rearm_data();
    fn test_field_data_off() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<rte_mbuf>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).data_off) as usize - ptr as usize
            },
            16usize,
            concat!("Offset of field: ", stringify!(rte_mbuf), "::", stringify!(data_off))
        );
    }
    test_field_data_off();
    fn test_field_refcnt() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<rte_mbuf>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).refcnt) as usize - ptr as usize
            },
            18usize,
            concat!("Offset of field: ", stringify!(rte_mbuf), "::", stringify!(refcnt))
        );
    }
    test_field_refcnt();
    fn test_field_nb_segs() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<rte_mbuf>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).nb_segs) as usize - ptr as usize
            },
            20usize,
            concat!("Offset of field: ", stringify!(rte_mbuf), "::", stringify!(nb_segs))
        );
    }
    test_field_nb_segs();
    fn test_field_port() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<rte_mbuf>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).port) as usize - ptr as usize
            },
            22usize,
            concat!("Offset of field: ", stringify!(rte_mbuf), "::", stringify!(port))
        );
    }
    test_field_port();
    fn test_field_ol_flags() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<rte_mbuf>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).ol_flags) as usize - ptr as usize
            },
            24usize,
            concat!("Offset of field: ", stringify!(rte_mbuf), "::", stringify!(ol_flags))
        );
    }
    test_field_ol_flags();
    fn test_field_rx_descriptor_fields1() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<rte_mbuf>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).rx_descriptor_fields1) as usize - ptr as usize
            },
            32usize,
            concat!(
                "Offset of field: ",
                stringify!(rte_mbuf),
                "::",
                stringify!(rx_descriptor_fields1)
            )
        );
    }
    test_field_rx_descriptor_fields1();
    fn test_field_pkt_len() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<rte_mbuf>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).pkt_len) as usize - ptr as usize
            },
            36usize,
            concat!("Offset of field: ", stringify!(rte_mbuf), "::", stringify!(pkt_len))
        );
    }
    test_field_pkt_len();
    fn test_field_data_len() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<rte_mbuf>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).data_len) as usize - ptr as usize
            },
            40usize,
            concat!("Offset of field: ", stringify!(rte_mbuf), "::", stringify!(data_len))
        );
    }
    test_field_data_len();
    fn test_field_vlan_tci() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<rte_mbuf>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).vlan_tci) as usize - ptr as usize
            },
            42usize,
            concat!("Offset of field: ", stringify!(rte_mbuf), "::", stringify!(vlan_tci))
        );
    }
    test_field_vlan_tci();
    fn test_field_vlan_tci_outer() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<rte_mbuf>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).vlan_tci_outer) as usize - ptr as usize
            },
            52usize,
            concat!(
                "Offset of field: ",
                stringify!(rte_mbuf),
                "::",
                stringify!(vlan_tci_outer)
            )
        );
    }
    test_field_vlan_tci_outer();
    fn test_field_buf_len() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<rte_mbuf>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).buf_len) as usize - ptr as usize
            },
            54usize,
            concat!("Offset of field: ", stringify!(rte_mbuf), "::", stringify!(buf_len))
        );
    }
    test_field_buf_len();
    fn test_field_pool() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<rte_mbuf>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).pool) as usize - ptr as usize
            },
            56usize,
            concat!("Offset of field: ", stringify!(rte_mbuf), "::", stringify!(pool))
        );
    }
    test_field_pool();
    fn test_field_cacheline1() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<rte_mbuf>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).cacheline1) as usize - ptr as usize
            },
            64usize,
            concat!("Offset of field: ", stringify!(rte_mbuf), "::", stringify!(cacheline1))
        );
    }
    test_field_cacheline1();
    fn test_field_next() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<rte_mbuf>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).next) as usize - ptr as usize
            },
            64usize,
            concat!("Offset of field: ", stringify!(rte_mbuf), "::", stringify!(next))
        );
    }
    test_field_next();
    fn test_field_shinfo() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<rte_mbuf>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).shinfo) as usize - ptr as usize
            },
            80usize,
            concat!("Offset of field: ", stringify!(rte_mbuf), "::", stringify!(shinfo))
        );
    }
    test_field_shinfo();
    fn test_field_priv_size() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<rte_mbuf>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).priv_size) as usize - ptr as usize
            },
            88usize,
            concat!("Offset of field: ", stringify!(rte_mbuf), "::", stringify!(priv_size))
        );
    }
    test_field_priv_size();
    fn test_field_timesync() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<rte_mbuf>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).timesync) as usize - ptr as usize
            },
            90usize,
            concat!("Offset of field: ", stringify!(rte_mbuf), "::", stringify!(timesync))
        );
    }
    test_field_timesync();
    fn test_field_dynfield1() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<rte_mbuf>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).dynfield1) as usize - ptr as usize
            },
            92usize,
            concat!("Offset of field: ", stringify!(rte_mbuf), "::", stringify!(dynfield1))
        );
    }
    test_field_dynfield1();
}
pub type rte_mbuf_extbuf_free_callback_t =
    ::std::option::Option<unsafe extern "C" fn(addr: *mut ::std::os::raw::c_void, opaque: *mut ::std::os::raw::c_void)>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rte_mbuf_ext_shared_info {
    pub free_cb: rte_mbuf_extbuf_free_callback_t,
    pub fcb_opaque: *mut ::std::os::raw::c_void,
    pub refcnt: u16,
}
#[test]
fn bindgen_test_layout_rte_mbuf_ext_shared_info() {
    assert_eq!(
        ::std::mem::size_of::<rte_mbuf_ext_shared_info>(),
        24usize,
        concat!("Size of: ", stringify!(rte_mbuf_ext_shared_info))
    );
    assert_eq!(
        ::std::mem::align_of::<rte_mbuf_ext_shared_info>(),
        8usize,
        concat!("Alignment of ", stringify!(rte_mbuf_ext_shared_info))
    );
    fn test_field_free_cb() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<rte_mbuf_ext_shared_info>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).free_cb) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(rte_mbuf_ext_shared_info),
                "::",
                stringify!(free_cb)
            )
        );
    }
    test_field_free_cb();
    fn test_field_fcb_opaque() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<rte_mbuf_ext_shared_info>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).fcb_opaque) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(rte_mbuf_ext_shared_info),
                "::",
                stringify!(fcb_opaque)
            )
        );
    }
    test_field_fcb_opaque();
    fn test_field_refcnt() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<rte_mbuf_ext_shared_info>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).refcnt) as usize - ptr as usize
            },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(rte_mbuf_ext_shared_info),
                "::",
                stringify!(refcnt)
            )
        );
    }
    test_field_refcnt();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rte_pktmbuf_pool_private {
    pub mbuf_data_room_size: u16,
    pub mbuf_priv_size: u16,
    pub flags: u32,
}
#[test]
fn bindgen_test_layout_rte_pktmbuf_pool_private() {
    assert_eq!(
        ::std::mem::size_of::<rte_pktmbuf_pool_private>(),
        8usize,
        concat!("Size of: ", stringify!(rte_pktmbuf_pool_private))
    );
    assert_eq!(
        ::std::mem::align_of::<rte_pktmbuf_pool_private>(),
        4usize,
        concat!("Alignment of ", stringify!(rte_pktmbuf_pool_private))
    );
    fn test_field_mbuf_data_room_size() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<rte_pktmbuf_pool_private>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).mbuf_data_room_size) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(rte_pktmbuf_pool_private),
                "::",
                stringify!(mbuf_data_room_size)
            )
        );
    }
    test_field_mbuf_data_room_size();
    fn test_field_mbuf_priv_size() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<rte_pktmbuf_pool_private>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).mbuf_priv_size) as usize - ptr as usize
            },
            2usize,
            concat!(
                "Offset of field: ",
                stringify!(rte_pktmbuf_pool_private),
                "::",
                stringify!(mbuf_priv_size)
            )
        );
    }
    test_field_mbuf_priv_size();
    fn test_field_flags() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<rte_pktmbuf_pool_private>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).flags) as usize - ptr as usize
            },
            4usize,
            concat!(
                "Offset of field: ",
                stringify!(rte_pktmbuf_pool_private),
                "::",
                stringify!(flags)
            )
        );
    }
    test_field_flags();
}
extern "C" {
    pub fn rte_pktmbuf_init(
        mp: *mut rte_mempool,
        opaque_arg: *mut ::std::os::raw::c_void,
        m: *mut ::std::os::raw::c_void,
        i: ::std::os::raw::c_uint,
    );
}
extern "C" {
    pub fn rte_pktmbuf_pool_init(mp: *mut rte_mempool, opaque_arg: *mut ::std::os::raw::c_void);
}
extern "C" {
    pub fn rte_pktmbuf_pool_create(
        name: *const ::std::os::raw::c_char,
        n: ::std::os::raw::c_uint,
        cache_size: ::std::os::raw::c_uint,
        priv_size: u16,
        data_room_size: u16,
        socket_id: ::std::os::raw::c_int,
    ) -> *mut rte_mempool;
}
extern "C" {
    pub fn rte_pktmbuf_clone(md: *mut rte_mbuf, mp: *mut rte_mempool) -> *mut rte_mbuf;
}
#[repr(C)]
#[repr(align(2))]
#[derive(Debug, Copy, Clone)]
pub struct rte_ether_addr {
    pub addr_bytes: [u8; 6usize],
}
#[test]
fn bindgen_test_layout_rte_ether_addr() {
    assert_eq!(
        ::std::mem::size_of::<rte_ether_addr>(),
        6usize,
        concat!("Size of: ", stringify!(rte_ether_addr))
    );
    assert_eq!(
        ::std::mem::align_of::<rte_ether_addr>(),
        2usize,
        concat!("Alignment of ", stringify!(rte_ether_addr))
    );
    fn test_field_addr_bytes() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<rte_ether_addr>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).addr_bytes) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(rte_ether_addr),
                "::",
                stringify!(addr_bytes)
            )
        );
    }
    test_field_addr_bytes();
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct rte_tcp_hdr {
    pub src_port: rte_be16_t,
    pub dst_port: rte_be16_t,
    pub sent_seq: rte_be32_t,
    pub recv_ack: rte_be32_t,
    pub data_off: u8,
    pub tcp_flags: u8,
    pub rx_win: rte_be16_t,
    pub cksum: rte_be16_t,
    pub tcp_urp: rte_be16_t,
}
#[test]
fn bindgen_test_layout_rte_tcp_hdr() {
    assert_eq!(
        ::std::mem::size_of::<rte_tcp_hdr>(),
        20usize,
        concat!("Size of: ", stringify!(rte_tcp_hdr))
    );
    assert_eq!(
        ::std::mem::align_of::<rte_tcp_hdr>(),
        1usize,
        concat!("Alignment of ", stringify!(rte_tcp_hdr))
    );
    fn test_field_src_port() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<rte_tcp_hdr>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).src_port) as usize - ptr as usize
            },
            0usize,
            concat!("Offset of field: ", stringify!(rte_tcp_hdr), "::", stringify!(src_port))
        );
    }
    test_field_src_port();
    fn test_field_dst_port() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<rte_tcp_hdr>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).dst_port) as usize - ptr as usize
            },
            2usize,
            concat!("Offset of field: ", stringify!(rte_tcp_hdr), "::", stringify!(dst_port))
        );
    }
    test_field_dst_port();
    fn test_field_sent_seq() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<rte_tcp_hdr>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).sent_seq) as usize - ptr as usize
            },
            4usize,
            concat!("Offset of field: ", stringify!(rte_tcp_hdr), "::", stringify!(sent_seq))
        );
    }
    test_field_sent_seq();
    fn test_field_recv_ack() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<rte_tcp_hdr>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).recv_ack) as usize - ptr as usize
            },
            8usize,
            concat!("Offset of field: ", stringify!(rte_tcp_hdr), "::", stringify!(recv_ack))
        );
    }
    test_field_recv_ack();
    fn test_field_data_off() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<rte_tcp_hdr>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).data_off) as usize - ptr as usize
            },
            12usize,
            concat!("Offset of field: ", stringify!(rte_tcp_hdr), "::", stringify!(data_off))
        );
    }
    test_field_data_off();
    fn test_field_tcp_flags() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<rte_tcp_hdr>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).tcp_flags) as usize - ptr as usize
            },
            13usize,
            concat!(
                "Offset of field: ",
                stringify!(rte_tcp_hdr),
                "::",
                stringify!(tcp_flags)
            )
        );
    }
    test_field_tcp_flags();
    fn test_field_rx_win() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<rte_tcp_hdr>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).rx_win) as usize - ptr as usize
            },
            14usize,
            concat!("Offset of field: ", stringify!(rte_tcp_hdr), "::", stringify!(rx_win))
        );
    }
    test_field_rx_win();
    fn test_field_cksum() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<rte_tcp_hdr>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).cksum) as usize - ptr as usize
            },
            16usize,
            concat!("Offset of field: ", stringify!(rte_tcp_hdr), "::", stringify!(cksum))
        );
    }
    test_field_cksum();
    fn test_field_tcp_urp() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<rte_tcp_hdr>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).tcp_urp) as usize - ptr as usize
            },
            18usize,
            concat!("Offset of field: ", stringify!(rte_tcp_hdr), "::", stringify!(tcp_urp))
        );
    }
    test_field_tcp_urp();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rte_flow_attr {
    pub group: u32,
    pub priority: u32,
    pub _bitfield_align_1: [u32; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 4usize]>,
}
#[test]
fn bindgen_test_layout_rte_flow_attr() {
    assert_eq!(
        ::std::mem::size_of::<rte_flow_attr>(),
        12usize,
        concat!("Size of: ", stringify!(rte_flow_attr))
    );
    assert_eq!(
        ::std::mem::align_of::<rte_flow_attr>(),
        4usize,
        concat!("Alignment of ", stringify!(rte_flow_attr))
    );
    fn test_field_group() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<rte_flow_attr>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).group) as usize - ptr as usize
            },
            0usize,
            concat!("Offset of field: ", stringify!(rte_flow_attr), "::", stringify!(group))
        );
    }
    test_field_group();
    fn test_field_priority() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<rte_flow_attr>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).priority) as usize - ptr as usize
            },
            4usize,
            concat!(
                "Offset of field: ",
                stringify!(rte_flow_attr),
                "::",
                stringify!(priority)
            )
        );
    }
    test_field_priority();
}
impl rte_flow_attr {
    #[inline]
    pub fn ingress(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_ingress(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn egress(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(1usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_egress(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(1usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn transfer(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(2usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_transfer(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(2usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn reserved(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(3usize, 29u8) as u32) }
    }
    #[inline]
    pub fn set_reserved(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(3usize, 29u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        ingress: u32,
        egress: u32,
        transfer: u32,
        reserved: u32,
    ) -> __BindgenBitfieldUnit<[u8; 4usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 4usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let ingress: u32 = unsafe { ::std::mem::transmute(ingress) };
            ingress as u64
        });
        __bindgen_bitfield_unit.set(1usize, 1u8, {
            let egress: u32 = unsafe { ::std::mem::transmute(egress) };
            egress as u64
        });
        __bindgen_bitfield_unit.set(2usize, 1u8, {
            let transfer: u32 = unsafe { ::std::mem::transmute(transfer) };
            transfer as u64
        });
        __bindgen_bitfield_unit.set(3usize, 29u8, {
            let reserved: u32 = unsafe { ::std::mem::transmute(reserved) };
            reserved as u64
        });
        __bindgen_bitfield_unit
    }
}
pub const rte_flow_item_type_RTE_FLOW_ITEM_TYPE_END: rte_flow_item_type = 0;
pub const rte_flow_item_type_RTE_FLOW_ITEM_TYPE_VOID: rte_flow_item_type = 1;
pub const rte_flow_item_type_RTE_FLOW_ITEM_TYPE_INVERT: rte_flow_item_type = 2;
pub const rte_flow_item_type_RTE_FLOW_ITEM_TYPE_ANY: rte_flow_item_type = 3;
pub const rte_flow_item_type_RTE_FLOW_ITEM_TYPE_PORT_ID: rte_flow_item_type = 4;
pub const rte_flow_item_type_RTE_FLOW_ITEM_TYPE_RAW: rte_flow_item_type = 5;
pub const rte_flow_item_type_RTE_FLOW_ITEM_TYPE_ETH: rte_flow_item_type = 6;
pub const rte_flow_item_type_RTE_FLOW_ITEM_TYPE_VLAN: rte_flow_item_type = 7;
pub const rte_flow_item_type_RTE_FLOW_ITEM_TYPE_IPV4: rte_flow_item_type = 8;
pub const rte_flow_item_type_RTE_FLOW_ITEM_TYPE_IPV6: rte_flow_item_type = 9;
pub const rte_flow_item_type_RTE_FLOW_ITEM_TYPE_ICMP: rte_flow_item_type = 10;
pub const rte_flow_item_type_RTE_FLOW_ITEM_TYPE_UDP: rte_flow_item_type = 11;
pub const rte_flow_item_type_RTE_FLOW_ITEM_TYPE_TCP: rte_flow_item_type = 12;
pub const rte_flow_item_type_RTE_FLOW_ITEM_TYPE_SCTP: rte_flow_item_type = 13;
pub const rte_flow_item_type_RTE_FLOW_ITEM_TYPE_VXLAN: rte_flow_item_type = 14;
pub const rte_flow_item_type_RTE_FLOW_ITEM_TYPE_E_TAG: rte_flow_item_type = 15;
pub const rte_flow_item_type_RTE_FLOW_ITEM_TYPE_NVGRE: rte_flow_item_type = 16;
pub const rte_flow_item_type_RTE_FLOW_ITEM_TYPE_MPLS: rte_flow_item_type = 17;
pub const rte_flow_item_type_RTE_FLOW_ITEM_TYPE_GRE: rte_flow_item_type = 18;
pub const rte_flow_item_type_RTE_FLOW_ITEM_TYPE_FUZZY: rte_flow_item_type = 19;
pub const rte_flow_item_type_RTE_FLOW_ITEM_TYPE_GTP: rte_flow_item_type = 20;
pub const rte_flow_item_type_RTE_FLOW_ITEM_TYPE_GTPC: rte_flow_item_type = 21;
pub const rte_flow_item_type_RTE_FLOW_ITEM_TYPE_GTPU: rte_flow_item_type = 22;
pub const rte_flow_item_type_RTE_FLOW_ITEM_TYPE_ESP: rte_flow_item_type = 23;
pub const rte_flow_item_type_RTE_FLOW_ITEM_TYPE_GENEVE: rte_flow_item_type = 24;
pub const rte_flow_item_type_RTE_FLOW_ITEM_TYPE_VXLAN_GPE: rte_flow_item_type = 25;
pub const rte_flow_item_type_RTE_FLOW_ITEM_TYPE_ARP_ETH_IPV4: rte_flow_item_type = 26;
pub const rte_flow_item_type_RTE_FLOW_ITEM_TYPE_IPV6_EXT: rte_flow_item_type = 27;
pub const rte_flow_item_type_RTE_FLOW_ITEM_TYPE_ICMP6: rte_flow_item_type = 28;
pub const rte_flow_item_type_RTE_FLOW_ITEM_TYPE_ICMP6_ND_NS: rte_flow_item_type = 29;
pub const rte_flow_item_type_RTE_FLOW_ITEM_TYPE_ICMP6_ND_NA: rte_flow_item_type = 30;
pub const rte_flow_item_type_RTE_FLOW_ITEM_TYPE_ICMP6_ND_OPT: rte_flow_item_type = 31;
pub const rte_flow_item_type_RTE_FLOW_ITEM_TYPE_ICMP6_ND_OPT_SLA_ETH: rte_flow_item_type = 32;
pub const rte_flow_item_type_RTE_FLOW_ITEM_TYPE_ICMP6_ND_OPT_TLA_ETH: rte_flow_item_type = 33;
pub const rte_flow_item_type_RTE_FLOW_ITEM_TYPE_MARK: rte_flow_item_type = 34;
pub const rte_flow_item_type_RTE_FLOW_ITEM_TYPE_META: rte_flow_item_type = 35;
pub const rte_flow_item_type_RTE_FLOW_ITEM_TYPE_GRE_KEY: rte_flow_item_type = 36;
pub const rte_flow_item_type_RTE_FLOW_ITEM_TYPE_GTP_PSC: rte_flow_item_type = 37;
pub const rte_flow_item_type_RTE_FLOW_ITEM_TYPE_PPPOES: rte_flow_item_type = 38;
pub const rte_flow_item_type_RTE_FLOW_ITEM_TYPE_PPPOED: rte_flow_item_type = 39;
pub const rte_flow_item_type_RTE_FLOW_ITEM_TYPE_PPPOE_PROTO_ID: rte_flow_item_type = 40;
pub const rte_flow_item_type_RTE_FLOW_ITEM_TYPE_NSH: rte_flow_item_type = 41;
pub const rte_flow_item_type_RTE_FLOW_ITEM_TYPE_IGMP: rte_flow_item_type = 42;
pub const rte_flow_item_type_RTE_FLOW_ITEM_TYPE_AH: rte_flow_item_type = 43;
pub const rte_flow_item_type_RTE_FLOW_ITEM_TYPE_HIGIG2: rte_flow_item_type = 44;
pub const rte_flow_item_type_RTE_FLOW_ITEM_TYPE_TAG: rte_flow_item_type = 45;
pub const rte_flow_item_type_RTE_FLOW_ITEM_TYPE_L2TPV3OIP: rte_flow_item_type = 46;
pub const rte_flow_item_type_RTE_FLOW_ITEM_TYPE_PFCP: rte_flow_item_type = 47;
pub const rte_flow_item_type_RTE_FLOW_ITEM_TYPE_ECPRI: rte_flow_item_type = 48;
pub const rte_flow_item_type_RTE_FLOW_ITEM_TYPE_IPV6_FRAG_EXT: rte_flow_item_type = 49;
pub const rte_flow_item_type_RTE_FLOW_ITEM_TYPE_GENEVE_OPT: rte_flow_item_type = 50;
pub const rte_flow_item_type_RTE_FLOW_ITEM_TYPE_INTEGRITY: rte_flow_item_type = 51;
pub const rte_flow_item_type_RTE_FLOW_ITEM_TYPE_CONNTRACK: rte_flow_item_type = 52;
pub const rte_flow_item_type_RTE_FLOW_ITEM_TYPE_PORT_REPRESENTOR: rte_flow_item_type = 53;
pub const rte_flow_item_type_RTE_FLOW_ITEM_TYPE_REPRESENTED_PORT: rte_flow_item_type = 54;
pub const rte_flow_item_type_RTE_FLOW_ITEM_TYPE_FLEX: rte_flow_item_type = 55;
pub const rte_flow_item_type_RTE_FLOW_ITEM_TYPE_L2TPV2: rte_flow_item_type = 56;
pub const rte_flow_item_type_RTE_FLOW_ITEM_TYPE_PPP: rte_flow_item_type = 57;
pub const rte_flow_item_type_RTE_FLOW_ITEM_TYPE_GRE_OPTION: rte_flow_item_type = 58;
pub const rte_flow_item_type_RTE_FLOW_ITEM_TYPE_MACSEC: rte_flow_item_type = 59;
pub const rte_flow_item_type_RTE_FLOW_ITEM_TYPE_METER_COLOR: rte_flow_item_type = 60;
pub type rte_flow_item_type = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rte_flow_item {
    pub type_: rte_flow_item_type,
    pub spec: *const ::std::os::raw::c_void,
    pub last: *const ::std::os::raw::c_void,
    pub mask: *const ::std::os::raw::c_void,
}
#[test]
fn bindgen_test_layout_rte_flow_item() {
    assert_eq!(
        ::std::mem::size_of::<rte_flow_item>(),
        32usize,
        concat!("Size of: ", stringify!(rte_flow_item))
    );
    assert_eq!(
        ::std::mem::align_of::<rte_flow_item>(),
        8usize,
        concat!("Alignment of ", stringify!(rte_flow_item))
    );
    fn test_field_type() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<rte_flow_item>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize
            },
            0usize,
            concat!("Offset of field: ", stringify!(rte_flow_item), "::", stringify!(type_))
        );
    }
    test_field_type();
    fn test_field_spec() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<rte_flow_item>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).spec) as usize - ptr as usize
            },
            8usize,
            concat!("Offset of field: ", stringify!(rte_flow_item), "::", stringify!(spec))
        );
    }
    test_field_spec();
    fn test_field_last() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<rte_flow_item>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).last) as usize - ptr as usize
            },
            16usize,
            concat!("Offset of field: ", stringify!(rte_flow_item), "::", stringify!(last))
        );
    }
    test_field_last();
    fn test_field_mask() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<rte_flow_item>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).mask) as usize - ptr as usize
            },
            24usize,
            concat!("Offset of field: ", stringify!(rte_flow_item), "::", stringify!(mask))
        );
    }
    test_field_mask();
}
pub const rte_flow_action_type_RTE_FLOW_ACTION_TYPE_END: rte_flow_action_type = 0;
pub const rte_flow_action_type_RTE_FLOW_ACTION_TYPE_VOID: rte_flow_action_type = 1;
pub const rte_flow_action_type_RTE_FLOW_ACTION_TYPE_PASSTHRU: rte_flow_action_type = 2;
pub const rte_flow_action_type_RTE_FLOW_ACTION_TYPE_JUMP: rte_flow_action_type = 3;
pub const rte_flow_action_type_RTE_FLOW_ACTION_TYPE_MARK: rte_flow_action_type = 4;
pub const rte_flow_action_type_RTE_FLOW_ACTION_TYPE_FLAG: rte_flow_action_type = 5;
pub const rte_flow_action_type_RTE_FLOW_ACTION_TYPE_QUEUE: rte_flow_action_type = 6;
pub const rte_flow_action_type_RTE_FLOW_ACTION_TYPE_DROP: rte_flow_action_type = 7;
pub const rte_flow_action_type_RTE_FLOW_ACTION_TYPE_COUNT: rte_flow_action_type = 8;
pub const rte_flow_action_type_RTE_FLOW_ACTION_TYPE_RSS: rte_flow_action_type = 9;
pub const rte_flow_action_type_RTE_FLOW_ACTION_TYPE_PF: rte_flow_action_type = 10;
pub const rte_flow_action_type_RTE_FLOW_ACTION_TYPE_VF: rte_flow_action_type = 11;
pub const rte_flow_action_type_RTE_FLOW_ACTION_TYPE_PORT_ID: rte_flow_action_type = 12;
pub const rte_flow_action_type_RTE_FLOW_ACTION_TYPE_METER: rte_flow_action_type = 13;
pub const rte_flow_action_type_RTE_FLOW_ACTION_TYPE_SECURITY: rte_flow_action_type = 14;
pub const rte_flow_action_type_RTE_FLOW_ACTION_TYPE_OF_DEC_NW_TTL: rte_flow_action_type = 15;
pub const rte_flow_action_type_RTE_FLOW_ACTION_TYPE_OF_POP_VLAN: rte_flow_action_type = 16;
pub const rte_flow_action_type_RTE_FLOW_ACTION_TYPE_OF_PUSH_VLAN: rte_flow_action_type = 17;
pub const rte_flow_action_type_RTE_FLOW_ACTION_TYPE_OF_SET_VLAN_VID: rte_flow_action_type = 18;
pub const rte_flow_action_type_RTE_FLOW_ACTION_TYPE_OF_SET_VLAN_PCP: rte_flow_action_type = 19;
pub const rte_flow_action_type_RTE_FLOW_ACTION_TYPE_OF_POP_MPLS: rte_flow_action_type = 20;
pub const rte_flow_action_type_RTE_FLOW_ACTION_TYPE_OF_PUSH_MPLS: rte_flow_action_type = 21;
pub const rte_flow_action_type_RTE_FLOW_ACTION_TYPE_VXLAN_ENCAP: rte_flow_action_type = 22;
pub const rte_flow_action_type_RTE_FLOW_ACTION_TYPE_VXLAN_DECAP: rte_flow_action_type = 23;
pub const rte_flow_action_type_RTE_FLOW_ACTION_TYPE_NVGRE_ENCAP: rte_flow_action_type = 24;
pub const rte_flow_action_type_RTE_FLOW_ACTION_TYPE_NVGRE_DECAP: rte_flow_action_type = 25;
pub const rte_flow_action_type_RTE_FLOW_ACTION_TYPE_RAW_ENCAP: rte_flow_action_type = 26;
pub const rte_flow_action_type_RTE_FLOW_ACTION_TYPE_RAW_DECAP: rte_flow_action_type = 27;
pub const rte_flow_action_type_RTE_FLOW_ACTION_TYPE_SET_IPV4_SRC: rte_flow_action_type = 28;
pub const rte_flow_action_type_RTE_FLOW_ACTION_TYPE_SET_IPV4_DST: rte_flow_action_type = 29;
pub const rte_flow_action_type_RTE_FLOW_ACTION_TYPE_SET_IPV6_SRC: rte_flow_action_type = 30;
pub const rte_flow_action_type_RTE_FLOW_ACTION_TYPE_SET_IPV6_DST: rte_flow_action_type = 31;
pub const rte_flow_action_type_RTE_FLOW_ACTION_TYPE_SET_TP_SRC: rte_flow_action_type = 32;
pub const rte_flow_action_type_RTE_FLOW_ACTION_TYPE_SET_TP_DST: rte_flow_action_type = 33;
pub const rte_flow_action_type_RTE_FLOW_ACTION_TYPE_MAC_SWAP: rte_flow_action_type = 34;
pub const rte_flow_action_type_RTE_FLOW_ACTION_TYPE_DEC_TTL: rte_flow_action_type = 35;
pub const rte_flow_action_type_RTE_FLOW_ACTION_TYPE_SET_TTL: rte_flow_action_type = 36;
pub const rte_flow_action_type_RTE_FLOW_ACTION_TYPE_SET_MAC_SRC: rte_flow_action_type = 37;
pub const rte_flow_action_type_RTE_FLOW_ACTION_TYPE_SET_MAC_DST: rte_flow_action_type = 38;
pub const rte_flow_action_type_RTE_FLOW_ACTION_TYPE_INC_TCP_SEQ: rte_flow_action_type = 39;
pub const rte_flow_action_type_RTE_FLOW_ACTION_TYPE_DEC_TCP_SEQ: rte_flow_action_type = 40;
pub const rte_flow_action_type_RTE_FLOW_ACTION_TYPE_INC_TCP_ACK: rte_flow_action_type = 41;
pub const rte_flow_action_type_RTE_FLOW_ACTION_TYPE_DEC_TCP_ACK: rte_flow_action_type = 42;
pub const rte_flow_action_type_RTE_FLOW_ACTION_TYPE_SET_TAG: rte_flow_action_type = 43;
pub const rte_flow_action_type_RTE_FLOW_ACTION_TYPE_SET_META: rte_flow_action_type = 44;
pub const rte_flow_action_type_RTE_FLOW_ACTION_TYPE_SET_IPV4_DSCP: rte_flow_action_type = 45;
pub const rte_flow_action_type_RTE_FLOW_ACTION_TYPE_SET_IPV6_DSCP: rte_flow_action_type = 46;
pub const rte_flow_action_type_RTE_FLOW_ACTION_TYPE_AGE: rte_flow_action_type = 47;
pub const rte_flow_action_type_RTE_FLOW_ACTION_TYPE_SAMPLE: rte_flow_action_type = 48;
pub const rte_flow_action_type_RTE_FLOW_ACTION_TYPE_SHARED: rte_flow_action_type = 49;
pub const rte_flow_action_type_RTE_FLOW_ACTION_TYPE_MODIFY_FIELD: rte_flow_action_type = 50;
pub const rte_flow_action_type_RTE_FLOW_ACTION_TYPE_INDIRECT: rte_flow_action_type = 51;
pub const rte_flow_action_type_RTE_FLOW_ACTION_TYPE_CONNTRACK: rte_flow_action_type = 52;
pub const rte_flow_action_type_RTE_FLOW_ACTION_TYPE_METER_COLOR: rte_flow_action_type = 53;
pub const rte_flow_action_type_RTE_FLOW_ACTION_TYPE_PORT_REPRESENTOR: rte_flow_action_type = 54;
pub const rte_flow_action_type_RTE_FLOW_ACTION_TYPE_REPRESENTED_PORT: rte_flow_action_type = 55;
pub const rte_flow_action_type_RTE_FLOW_ACTION_TYPE_METER_MARK: rte_flow_action_type = 56;
pub const rte_flow_action_type_RTE_FLOW_ACTION_TYPE_SEND_TO_KERNEL: rte_flow_action_type = 57;
pub type rte_flow_action_type = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rte_flow_action_queue {
    pub index: u16,
}
#[test]
fn bindgen_test_layout_rte_flow_action_queue() {
    assert_eq!(
        ::std::mem::size_of::<rte_flow_action_queue>(),
        2usize,
        concat!("Size of: ", stringify!(rte_flow_action_queue))
    );
    assert_eq!(
        ::std::mem::align_of::<rte_flow_action_queue>(),
        2usize,
        concat!("Alignment of ", stringify!(rte_flow_action_queue))
    );
    fn test_field_index() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<rte_flow_action_queue>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).index) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(rte_flow_action_queue),
                "::",
                stringify!(index)
            )
        );
    }
    test_field_index();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rte_flow_action {
    pub type_: rte_flow_action_type,
    pub conf: *const ::std::os::raw::c_void,
}
#[test]
fn bindgen_test_layout_rte_flow_action() {
    assert_eq!(
        ::std::mem::size_of::<rte_flow_action>(),
        16usize,
        concat!("Size of: ", stringify!(rte_flow_action))
    );
    assert_eq!(
        ::std::mem::align_of::<rte_flow_action>(),
        8usize,
        concat!("Alignment of ", stringify!(rte_flow_action))
    );
    fn test_field_type() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<rte_flow_action>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(rte_flow_action),
                "::",
                stringify!(type_)
            )
        );
    }
    test_field_type();
    fn test_field_conf() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<rte_flow_action>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).conf) as usize - ptr as usize
            },
            8usize,
            concat!("Offset of field: ", stringify!(rte_flow_action), "::", stringify!(conf))
        );
    }
    test_field_conf();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rte_flow {
    _unused: [u8; 0],
}
pub const rte_flow_error_type_RTE_FLOW_ERROR_TYPE_NONE: rte_flow_error_type = 0;
pub const rte_flow_error_type_RTE_FLOW_ERROR_TYPE_UNSPECIFIED: rte_flow_error_type = 1;
pub const rte_flow_error_type_RTE_FLOW_ERROR_TYPE_HANDLE: rte_flow_error_type = 2;
pub const rte_flow_error_type_RTE_FLOW_ERROR_TYPE_ATTR_GROUP: rte_flow_error_type = 3;
pub const rte_flow_error_type_RTE_FLOW_ERROR_TYPE_ATTR_PRIORITY: rte_flow_error_type = 4;
pub const rte_flow_error_type_RTE_FLOW_ERROR_TYPE_ATTR_INGRESS: rte_flow_error_type = 5;
pub const rte_flow_error_type_RTE_FLOW_ERROR_TYPE_ATTR_EGRESS: rte_flow_error_type = 6;
pub const rte_flow_error_type_RTE_FLOW_ERROR_TYPE_ATTR_TRANSFER: rte_flow_error_type = 7;
pub const rte_flow_error_type_RTE_FLOW_ERROR_TYPE_ATTR: rte_flow_error_type = 8;
pub const rte_flow_error_type_RTE_FLOW_ERROR_TYPE_ITEM_NUM: rte_flow_error_type = 9;
pub const rte_flow_error_type_RTE_FLOW_ERROR_TYPE_ITEM_SPEC: rte_flow_error_type = 10;
pub const rte_flow_error_type_RTE_FLOW_ERROR_TYPE_ITEM_LAST: rte_flow_error_type = 11;
pub const rte_flow_error_type_RTE_FLOW_ERROR_TYPE_ITEM_MASK: rte_flow_error_type = 12;
pub const rte_flow_error_type_RTE_FLOW_ERROR_TYPE_ITEM: rte_flow_error_type = 13;
pub const rte_flow_error_type_RTE_FLOW_ERROR_TYPE_ACTION_NUM: rte_flow_error_type = 14;
pub const rte_flow_error_type_RTE_FLOW_ERROR_TYPE_ACTION_CONF: rte_flow_error_type = 15;
pub const rte_flow_error_type_RTE_FLOW_ERROR_TYPE_ACTION: rte_flow_error_type = 16;
pub const rte_flow_error_type_RTE_FLOW_ERROR_TYPE_STATE: rte_flow_error_type = 17;
pub type rte_flow_error_type = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rte_flow_error {
    pub type_: rte_flow_error_type,
    pub cause: *const ::std::os::raw::c_void,
    pub message: *const ::std::os::raw::c_char,
}
#[test]
fn bindgen_test_layout_rte_flow_error() {
    assert_eq!(
        ::std::mem::size_of::<rte_flow_error>(),
        24usize,
        concat!("Size of: ", stringify!(rte_flow_error))
    );
    assert_eq!(
        ::std::mem::align_of::<rte_flow_error>(),
        8usize,
        concat!("Alignment of ", stringify!(rte_flow_error))
    );
    fn test_field_type() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<rte_flow_error>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize
            },
            0usize,
            concat!("Offset of field: ", stringify!(rte_flow_error), "::", stringify!(type_))
        );
    }
    test_field_type();
    fn test_field_cause() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<rte_flow_error>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).cause) as usize - ptr as usize
            },
            8usize,
            concat!("Offset of field: ", stringify!(rte_flow_error), "::", stringify!(cause))
        );
    }
    test_field_cause();
    fn test_field_message() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<rte_flow_error>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).message) as usize - ptr as usize
            },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(rte_flow_error),
                "::",
                stringify!(message)
            )
        );
    }
    test_field_message();
}
extern "C" {
    pub fn rte_flow_validate(
        port_id: u16,
        attr: *const rte_flow_attr,
        pattern: *const rte_flow_item,
        actions: *const rte_flow_action,
        error: *mut rte_flow_error,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rte_flow_create(
        port_id: u16,
        attr: *const rte_flow_attr,
        pattern: *const rte_flow_item,
        actions: *const rte_flow_action,
        error: *mut rte_flow_error,
    ) -> *mut rte_flow;
}
#[repr(C)]
#[repr(align(4))]
#[derive(Debug, Copy, Clone)]
pub struct rte_eth_intr_conf {
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 1usize]>,
    pub __bindgen_padding_0: [u8; 3usize],
}
#[test]
fn bindgen_test_layout_rte_eth_intr_conf() {
    assert_eq!(
        ::std::mem::size_of::<rte_eth_intr_conf>(),
        4usize,
        concat!("Size of: ", stringify!(rte_eth_intr_conf))
    );
    assert_eq!(
        ::std::mem::align_of::<rte_eth_intr_conf>(),
        4usize,
        concat!("Alignment of ", stringify!(rte_eth_intr_conf))
    );
}
impl rte_eth_intr_conf {
    #[inline]
    pub fn lsc(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_lsc(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn rxq(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(1usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_rxq(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(1usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn rmv(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(2usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_rmv(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(2usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(lsc: u32, rxq: u32, rmv: u32) -> __BindgenBitfieldUnit<[u8; 1usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 1usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let lsc: u32 = unsafe { ::std::mem::transmute(lsc) };
            lsc as u64
        });
        __bindgen_bitfield_unit.set(1usize, 1u8, {
            let rxq: u32 = unsafe { ::std::mem::transmute(rxq) };
            rxq as u64
        });
        __bindgen_bitfield_unit.set(2usize, 1u8, {
            let rmv: u32 = unsafe { ::std::mem::transmute(rmv) };
            rmv as u64
        });
        __bindgen_bitfield_unit
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct rte_eth_conf {
    pub link_speeds: u32,
    pub rxmode: rte_eth_rxmode,
    pub txmode: rte_eth_txmode,
    pub lpbk_mode: u32,
    pub rx_adv_conf: rte_eth_conf__bindgen_ty_1,
    pub tx_adv_conf: rte_eth_conf__bindgen_ty_2,
    pub dcb_capability_en: u32,
    pub intr_conf: rte_eth_intr_conf,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rte_eth_conf__bindgen_ty_1 {
    pub rss_conf: rte_eth_rss_conf,
    pub vmdq_dcb_conf: rte_eth_vmdq_dcb_conf,
    pub dcb_rx_conf: rte_eth_dcb_rx_conf,
    pub vmdq_rx_conf: rte_eth_vmdq_rx_conf,
}
#[test]
fn bindgen_test_layout_rte_eth_conf__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<rte_eth_conf__bindgen_ty_1>(),
        2120usize,
        concat!("Size of: ", stringify!(rte_eth_conf__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<rte_eth_conf__bindgen_ty_1>(),
        8usize,
        concat!("Alignment of ", stringify!(rte_eth_conf__bindgen_ty_1))
    );
    fn test_field_rss_conf() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<rte_eth_conf__bindgen_ty_1>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).rss_conf) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(rte_eth_conf__bindgen_ty_1),
                "::",
                stringify!(rss_conf)
            )
        );
    }
    test_field_rss_conf();
    fn test_field_vmdq_dcb_conf() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<rte_eth_conf__bindgen_ty_1>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).vmdq_dcb_conf) as usize - ptr as usize
            },
            24usize,
            concat!(
                "Offset of field: ",
                stringify!(rte_eth_conf__bindgen_ty_1),
                "::",
                stringify!(vmdq_dcb_conf)
            )
        );
    }
    test_field_vmdq_dcb_conf();
    fn test_field_dcb_rx_conf() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<rte_eth_conf__bindgen_ty_1>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).dcb_rx_conf) as usize - ptr as usize
            },
            1064usize,
            concat!(
                "Offset of field: ",
                stringify!(rte_eth_conf__bindgen_ty_1),
                "::",
                stringify!(dcb_rx_conf)
            )
        );
    }
    test_field_dcb_rx_conf();
    fn test_field_vmdq_rx_conf() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<rte_eth_conf__bindgen_ty_1>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).vmdq_rx_conf) as usize - ptr as usize
            },
            1080usize,
            concat!(
                "Offset of field: ",
                stringify!(rte_eth_conf__bindgen_ty_1),
                "::",
                stringify!(vmdq_rx_conf)
            )
        );
    }
    test_field_vmdq_rx_conf();
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union rte_eth_conf__bindgen_ty_2 {
    pub vmdq_dcb_tx_conf: rte_eth_vmdq_dcb_tx_conf,
    pub dcb_tx_conf: rte_eth_dcb_tx_conf,
    pub vmdq_tx_conf: rte_eth_vmdq_tx_conf,
}
#[test]
fn bindgen_test_layout_rte_eth_conf__bindgen_ty_2() {
    assert_eq!(
        ::std::mem::size_of::<rte_eth_conf__bindgen_ty_2>(),
        12usize,
        concat!("Size of: ", stringify!(rte_eth_conf__bindgen_ty_2))
    );
    assert_eq!(
        ::std::mem::align_of::<rte_eth_conf__bindgen_ty_2>(),
        4usize,
        concat!("Alignment of ", stringify!(rte_eth_conf__bindgen_ty_2))
    );
    fn test_field_vmdq_dcb_tx_conf() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<rte_eth_conf__bindgen_ty_2>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).vmdq_dcb_tx_conf) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(rte_eth_conf__bindgen_ty_2),
                "::",
                stringify!(vmdq_dcb_tx_conf)
            )
        );
    }
    test_field_vmdq_dcb_tx_conf();
    fn test_field_dcb_tx_conf() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<rte_eth_conf__bindgen_ty_2>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).dcb_tx_conf) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(rte_eth_conf__bindgen_ty_2),
                "::",
                stringify!(dcb_tx_conf)
            )
        );
    }
    test_field_dcb_tx_conf();
    fn test_field_vmdq_tx_conf() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<rte_eth_conf__bindgen_ty_2>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).vmdq_tx_conf) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(rte_eth_conf__bindgen_ty_2),
                "::",
                stringify!(vmdq_tx_conf)
            )
        );
    }
    test_field_vmdq_tx_conf();
}
#[test]
fn bindgen_test_layout_rte_eth_conf() {
    assert_eq!(
        ::std::mem::size_of::<rte_eth_conf>(),
        2272usize,
        concat!("Size of: ", stringify!(rte_eth_conf))
    );
    assert_eq!(
        ::std::mem::align_of::<rte_eth_conf>(),
        8usize,
        concat!("Alignment of ", stringify!(rte_eth_conf))
    );
    fn test_field_link_speeds() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<rte_eth_conf>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).link_speeds) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(rte_eth_conf),
                "::",
                stringify!(link_speeds)
            )
        );
    }
    test_field_link_speeds();
    fn test_field_rxmode() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<rte_eth_conf>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).rxmode) as usize - ptr as usize
            },
            8usize,
            concat!("Offset of field: ", stringify!(rte_eth_conf), "::", stringify!(rxmode))
        );
    }
    test_field_rxmode();
    fn test_field_txmode() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<rte_eth_conf>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).txmode) as usize - ptr as usize
            },
            64usize,
            concat!("Offset of field: ", stringify!(rte_eth_conf), "::", stringify!(txmode))
        );
    }
    test_field_txmode();
    fn test_field_lpbk_mode() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<rte_eth_conf>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).lpbk_mode) as usize - ptr as usize
            },
            120usize,
            concat!(
                "Offset of field: ",
                stringify!(rte_eth_conf),
                "::",
                stringify!(lpbk_mode)
            )
        );
    }
    test_field_lpbk_mode();
    fn test_field_rx_adv_conf() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<rte_eth_conf>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).rx_adv_conf) as usize - ptr as usize
            },
            128usize,
            concat!(
                "Offset of field: ",
                stringify!(rte_eth_conf),
                "::",
                stringify!(rx_adv_conf)
            )
        );
    }
    test_field_rx_adv_conf();
    fn test_field_tx_adv_conf() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<rte_eth_conf>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).tx_adv_conf) as usize - ptr as usize
            },
            2248usize,
            concat!(
                "Offset of field: ",
                stringify!(rte_eth_conf),
                "::",
                stringify!(tx_adv_conf)
            )
        );
    }
    test_field_tx_adv_conf();
    fn test_field_dcb_capability_en() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<rte_eth_conf>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).dcb_capability_en) as usize - ptr as usize
            },
            2260usize,
            concat!(
                "Offset of field: ",
                stringify!(rte_eth_conf),
                "::",
                stringify!(dcb_capability_en)
            )
        );
    }
    test_field_dcb_capability_en();
    fn test_field_intr_conf() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<rte_eth_conf>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).intr_conf) as usize - ptr as usize
            },
            2264usize,
            concat!(
                "Offset of field: ",
                stringify!(rte_eth_conf),
                "::",
                stringify!(intr_conf)
            )
        );
    }
    test_field_intr_conf();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rte_eth_dev_portconf {
    pub burst_size: u16,
    pub ring_size: u16,
    pub nb_queues: u16,
}
#[test]
fn bindgen_test_layout_rte_eth_dev_portconf() {
    assert_eq!(
        ::std::mem::size_of::<rte_eth_dev_portconf>(),
        6usize,
        concat!("Size of: ", stringify!(rte_eth_dev_portconf))
    );
    assert_eq!(
        ::std::mem::align_of::<rte_eth_dev_portconf>(),
        2usize,
        concat!("Alignment of ", stringify!(rte_eth_dev_portconf))
    );
    fn test_field_burst_size() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<rte_eth_dev_portconf>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).burst_size) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(rte_eth_dev_portconf),
                "::",
                stringify!(burst_size)
            )
        );
    }
    test_field_burst_size();
    fn test_field_ring_size() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<rte_eth_dev_portconf>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).ring_size) as usize - ptr as usize
            },
            2usize,
            concat!(
                "Offset of field: ",
                stringify!(rte_eth_dev_portconf),
                "::",
                stringify!(ring_size)
            )
        );
    }
    test_field_ring_size();
    fn test_field_nb_queues() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<rte_eth_dev_portconf>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).nb_queues) as usize - ptr as usize
            },
            4usize,
            concat!(
                "Offset of field: ",
                stringify!(rte_eth_dev_portconf),
                "::",
                stringify!(nb_queues)
            )
        );
    }
    test_field_nb_queues();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rte_eth_switch_info {
    pub name: *const ::std::os::raw::c_char,
    pub domain_id: u16,
    pub port_id: u16,
    pub rx_domain: u16,
}
#[test]
fn bindgen_test_layout_rte_eth_switch_info() {
    assert_eq!(
        ::std::mem::size_of::<rte_eth_switch_info>(),
        16usize,
        concat!("Size of: ", stringify!(rte_eth_switch_info))
    );
    assert_eq!(
        ::std::mem::align_of::<rte_eth_switch_info>(),
        8usize,
        concat!("Alignment of ", stringify!(rte_eth_switch_info))
    );
    fn test_field_name() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<rte_eth_switch_info>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).name) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(rte_eth_switch_info),
                "::",
                stringify!(name)
            )
        );
    }
    test_field_name();
    fn test_field_domain_id() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<rte_eth_switch_info>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).domain_id) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(rte_eth_switch_info),
                "::",
                stringify!(domain_id)
            )
        );
    }
    test_field_domain_id();
    fn test_field_port_id() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<rte_eth_switch_info>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).port_id) as usize - ptr as usize
            },
            10usize,
            concat!(
                "Offset of field: ",
                stringify!(rte_eth_switch_info),
                "::",
                stringify!(port_id)
            )
        );
    }
    test_field_port_id();
    fn test_field_rx_domain() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<rte_eth_switch_info>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).rx_domain) as usize - ptr as usize
            },
            12usize,
            concat!(
                "Offset of field: ",
                stringify!(rte_eth_switch_info),
                "::",
                stringify!(rx_domain)
            )
        );
    }
    test_field_rx_domain();
}
#[repr(C)]
#[repr(align(4))]
#[derive(Debug, Copy, Clone)]
pub struct rte_eth_rxseg_capa {
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 1usize]>,
    pub max_nseg: u16,
    pub reserved: u16,
}
#[test]
fn bindgen_test_layout_rte_eth_rxseg_capa() {
    assert_eq!(
        ::std::mem::size_of::<rte_eth_rxseg_capa>(),
        8usize,
        concat!("Size of: ", stringify!(rte_eth_rxseg_capa))
    );
    assert_eq!(
        ::std::mem::align_of::<rte_eth_rxseg_capa>(),
        4usize,
        concat!("Alignment of ", stringify!(rte_eth_rxseg_capa))
    );
    fn test_field_max_nseg() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<rte_eth_rxseg_capa>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).max_nseg) as usize - ptr as usize
            },
            2usize,
            concat!(
                "Offset of field: ",
                stringify!(rte_eth_rxseg_capa),
                "::",
                stringify!(max_nseg)
            )
        );
    }
    test_field_max_nseg();
    fn test_field_reserved() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<rte_eth_rxseg_capa>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).reserved) as usize - ptr as usize
            },
            4usize,
            concat!(
                "Offset of field: ",
                stringify!(rte_eth_rxseg_capa),
                "::",
                stringify!(reserved)
            )
        );
    }
    test_field_reserved();
}
impl rte_eth_rxseg_capa {
    #[inline]
    pub fn multi_pools(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_multi_pools(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn offset_allowed(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(1usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_offset_allowed(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(1usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn offset_align_log2(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(2usize, 4u8) as u32) }
    }
    #[inline]
    pub fn set_offset_align_log2(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(2usize, 4u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        multi_pools: u32,
        offset_allowed: u32,
        offset_align_log2: u32,
    ) -> __BindgenBitfieldUnit<[u8; 1usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 1usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let multi_pools: u32 = unsafe { ::std::mem::transmute(multi_pools) };
            multi_pools as u64
        });
        __bindgen_bitfield_unit.set(1usize, 1u8, {
            let offset_allowed: u32 = unsafe { ::std::mem::transmute(offset_allowed) };
            offset_allowed as u64
        });
        __bindgen_bitfield_unit.set(2usize, 4u8, {
            let offset_align_log2: u32 = unsafe { ::std::mem::transmute(offset_align_log2) };
            offset_align_log2 as u64
        });
        __bindgen_bitfield_unit
    }
}
pub const rte_eth_err_handle_mode_RTE_ETH_ERROR_HANDLE_MODE_NONE: rte_eth_err_handle_mode = 0;
pub const rte_eth_err_handle_mode_RTE_ETH_ERROR_HANDLE_MODE_PASSIVE: rte_eth_err_handle_mode = 1;
pub const rte_eth_err_handle_mode_RTE_ETH_ERROR_HANDLE_MODE_PROACTIVE: rte_eth_err_handle_mode = 2;
pub type rte_eth_err_handle_mode = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rte_eth_dev_info {
    pub device: *mut rte_device,
    pub driver_name: *const ::std::os::raw::c_char,
    pub if_index: ::std::os::raw::c_uint,
    pub min_mtu: u16,
    pub max_mtu: u16,
    pub dev_flags: *const u32,
    pub min_rx_bufsize: u32,
    pub max_rx_pktlen: u32,
    pub max_lro_pkt_size: u32,
    pub max_rx_queues: u16,
    pub max_tx_queues: u16,
    pub max_mac_addrs: u32,
    pub max_hash_mac_addrs: u32,
    pub max_vfs: u16,
    pub max_vmdq_pools: u16,
    pub rx_seg_capa: rte_eth_rxseg_capa,
    pub rx_offload_capa: u64,
    pub tx_offload_capa: u64,
    pub rx_queue_offload_capa: u64,
    pub tx_queue_offload_capa: u64,
    pub reta_size: u16,
    pub hash_key_size: u8,
    pub flow_type_rss_offloads: u64,
    pub default_rxconf: rte_eth_rxconf,
    pub default_txconf: rte_eth_txconf,
    pub vmdq_queue_base: u16,
    pub vmdq_queue_num: u16,
    pub vmdq_pool_base: u16,
    pub rx_desc_lim: rte_eth_desc_lim,
    pub tx_desc_lim: rte_eth_desc_lim,
    pub speed_capa: u32,
    pub nb_rx_queues: u16,
    pub nb_tx_queues: u16,
    pub max_rx_mempools: u16,
    pub default_rxportconf: rte_eth_dev_portconf,
    pub default_txportconf: rte_eth_dev_portconf,
    pub dev_capa: u64,
    pub switch_info: rte_eth_switch_info,
    pub err_handle_mode: rte_eth_err_handle_mode,
    pub reserved_64s: [u64; 2usize],
    pub reserved_ptrs: [*mut ::std::os::raw::c_void; 2usize],
}
#[test]
fn bindgen_test_layout_rte_eth_dev_info() {
    assert_eq!(
        ::std::mem::size_of::<rte_eth_dev_info>(),
        376usize,
        concat!("Size of: ", stringify!(rte_eth_dev_info))
    );
    assert_eq!(
        ::std::mem::align_of::<rte_eth_dev_info>(),
        8usize,
        concat!("Alignment of ", stringify!(rte_eth_dev_info))
    );
    fn test_field_device() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<rte_eth_dev_info>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).device) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(rte_eth_dev_info),
                "::",
                stringify!(device)
            )
        );
    }
    test_field_device();
    fn test_field_driver_name() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<rte_eth_dev_info>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).driver_name) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(rte_eth_dev_info),
                "::",
                stringify!(driver_name)
            )
        );
    }
    test_field_driver_name();
    fn test_field_if_index() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<rte_eth_dev_info>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).if_index) as usize - ptr as usize
            },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(rte_eth_dev_info),
                "::",
                stringify!(if_index)
            )
        );
    }
    test_field_if_index();
    fn test_field_min_mtu() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<rte_eth_dev_info>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).min_mtu) as usize - ptr as usize
            },
            20usize,
            concat!(
                "Offset of field: ",
                stringify!(rte_eth_dev_info),
                "::",
                stringify!(min_mtu)
            )
        );
    }
    test_field_min_mtu();
    fn test_field_max_mtu() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<rte_eth_dev_info>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).max_mtu) as usize - ptr as usize
            },
            22usize,
            concat!(
                "Offset of field: ",
                stringify!(rte_eth_dev_info),
                "::",
                stringify!(max_mtu)
            )
        );
    }
    test_field_max_mtu();
    fn test_field_dev_flags() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<rte_eth_dev_info>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).dev_flags) as usize - ptr as usize
            },
            24usize,
            concat!(
                "Offset of field: ",
                stringify!(rte_eth_dev_info),
                "::",
                stringify!(dev_flags)
            )
        );
    }
    test_field_dev_flags();
    fn test_field_min_rx_bufsize() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<rte_eth_dev_info>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).min_rx_bufsize) as usize - ptr as usize
            },
            32usize,
            concat!(
                "Offset of field: ",
                stringify!(rte_eth_dev_info),
                "::",
                stringify!(min_rx_bufsize)
            )
        );
    }
    test_field_min_rx_bufsize();
    fn test_field_max_rx_pktlen() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<rte_eth_dev_info>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).max_rx_pktlen) as usize - ptr as usize
            },
            36usize,
            concat!(
                "Offset of field: ",
                stringify!(rte_eth_dev_info),
                "::",
                stringify!(max_rx_pktlen)
            )
        );
    }
    test_field_max_rx_pktlen();
    fn test_field_max_lro_pkt_size() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<rte_eth_dev_info>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).max_lro_pkt_size) as usize - ptr as usize
            },
            40usize,
            concat!(
                "Offset of field: ",
                stringify!(rte_eth_dev_info),
                "::",
                stringify!(max_lro_pkt_size)
            )
        );
    }
    test_field_max_lro_pkt_size();
    fn test_field_max_rx_queues() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<rte_eth_dev_info>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).max_rx_queues) as usize - ptr as usize
            },
            44usize,
            concat!(
                "Offset of field: ",
                stringify!(rte_eth_dev_info),
                "::",
                stringify!(max_rx_queues)
            )
        );
    }
    test_field_max_rx_queues();
    fn test_field_max_tx_queues() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<rte_eth_dev_info>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).max_tx_queues) as usize - ptr as usize
            },
            46usize,
            concat!(
                "Offset of field: ",
                stringify!(rte_eth_dev_info),
                "::",
                stringify!(max_tx_queues)
            )
        );
    }
    test_field_max_tx_queues();
    fn test_field_max_mac_addrs() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<rte_eth_dev_info>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).max_mac_addrs) as usize - ptr as usize
            },
            48usize,
            concat!(
                "Offset of field: ",
                stringify!(rte_eth_dev_info),
                "::",
                stringify!(max_mac_addrs)
            )
        );
    }
    test_field_max_mac_addrs();
    fn test_field_max_hash_mac_addrs() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<rte_eth_dev_info>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).max_hash_mac_addrs) as usize - ptr as usize
            },
            52usize,
            concat!(
                "Offset of field: ",
                stringify!(rte_eth_dev_info),
                "::",
                stringify!(max_hash_mac_addrs)
            )
        );
    }
    test_field_max_hash_mac_addrs();
    fn test_field_max_vfs() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<rte_eth_dev_info>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).max_vfs) as usize - ptr as usize
            },
            56usize,
            concat!(
                "Offset of field: ",
                stringify!(rte_eth_dev_info),
                "::",
                stringify!(max_vfs)
            )
        );
    }
    test_field_max_vfs();
    fn test_field_max_vmdq_pools() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<rte_eth_dev_info>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).max_vmdq_pools) as usize - ptr as usize
            },
            58usize,
            concat!(
                "Offset of field: ",
                stringify!(rte_eth_dev_info),
                "::",
                stringify!(max_vmdq_pools)
            )
        );
    }
    test_field_max_vmdq_pools();
    fn test_field_rx_seg_capa() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<rte_eth_dev_info>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).rx_seg_capa) as usize - ptr as usize
            },
            60usize,
            concat!(
                "Offset of field: ",
                stringify!(rte_eth_dev_info),
                "::",
                stringify!(rx_seg_capa)
            )
        );
    }
    test_field_rx_seg_capa();
    fn test_field_rx_offload_capa() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<rte_eth_dev_info>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).rx_offload_capa) as usize - ptr as usize
            },
            72usize,
            concat!(
                "Offset of field: ",
                stringify!(rte_eth_dev_info),
                "::",
                stringify!(rx_offload_capa)
            )
        );
    }
    test_field_rx_offload_capa();
    fn test_field_tx_offload_capa() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<rte_eth_dev_info>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).tx_offload_capa) as usize - ptr as usize
            },
            80usize,
            concat!(
                "Offset of field: ",
                stringify!(rte_eth_dev_info),
                "::",
                stringify!(tx_offload_capa)
            )
        );
    }
    test_field_tx_offload_capa();
    fn test_field_rx_queue_offload_capa() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<rte_eth_dev_info>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).rx_queue_offload_capa) as usize - ptr as usize
            },
            88usize,
            concat!(
                "Offset of field: ",
                stringify!(rte_eth_dev_info),
                "::",
                stringify!(rx_queue_offload_capa)
            )
        );
    }
    test_field_rx_queue_offload_capa();
    fn test_field_tx_queue_offload_capa() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<rte_eth_dev_info>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).tx_queue_offload_capa) as usize - ptr as usize
            },
            96usize,
            concat!(
                "Offset of field: ",
                stringify!(rte_eth_dev_info),
                "::",
                stringify!(tx_queue_offload_capa)
            )
        );
    }
    test_field_tx_queue_offload_capa();
    fn test_field_reta_size() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<rte_eth_dev_info>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).reta_size) as usize - ptr as usize
            },
            104usize,
            concat!(
                "Offset of field: ",
                stringify!(rte_eth_dev_info),
                "::",
                stringify!(reta_size)
            )
        );
    }
    test_field_reta_size();
    fn test_field_hash_key_size() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<rte_eth_dev_info>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).hash_key_size) as usize - ptr as usize
            },
            106usize,
            concat!(
                "Offset of field: ",
                stringify!(rte_eth_dev_info),
                "::",
                stringify!(hash_key_size)
            )
        );
    }
    test_field_hash_key_size();
    fn test_field_flow_type_rss_offloads() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<rte_eth_dev_info>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).flow_type_rss_offloads) as usize - ptr as usize
            },
            112usize,
            concat!(
                "Offset of field: ",
                stringify!(rte_eth_dev_info),
                "::",
                stringify!(flow_type_rss_offloads)
            )
        );
    }
    test_field_flow_type_rss_offloads();
    fn test_field_default_rxconf() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<rte_eth_dev_info>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).default_rxconf) as usize - ptr as usize
            },
            120usize,
            concat!(
                "Offset of field: ",
                stringify!(rte_eth_dev_info),
                "::",
                stringify!(default_rxconf)
            )
        );
    }
    test_field_default_rxconf();
    fn test_field_default_txconf() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<rte_eth_dev_info>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).default_txconf) as usize - ptr as usize
            },
            200usize,
            concat!(
                "Offset of field: ",
                stringify!(rte_eth_dev_info),
                "::",
                stringify!(default_txconf)
            )
        );
    }
    test_field_default_txconf();
    fn test_field_vmdq_queue_base() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<rte_eth_dev_info>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).vmdq_queue_base) as usize - ptr as usize
            },
            256usize,
            concat!(
                "Offset of field: ",
                stringify!(rte_eth_dev_info),
                "::",
                stringify!(vmdq_queue_base)
            )
        );
    }
    test_field_vmdq_queue_base();
    fn test_field_vmdq_queue_num() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<rte_eth_dev_info>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).vmdq_queue_num) as usize - ptr as usize
            },
            258usize,
            concat!(
                "Offset of field: ",
                stringify!(rte_eth_dev_info),
                "::",
                stringify!(vmdq_queue_num)
            )
        );
    }
    test_field_vmdq_queue_num();
    fn test_field_vmdq_pool_base() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<rte_eth_dev_info>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).vmdq_pool_base) as usize - ptr as usize
            },
            260usize,
            concat!(
                "Offset of field: ",
                stringify!(rte_eth_dev_info),
                "::",
                stringify!(vmdq_pool_base)
            )
        );
    }
    test_field_vmdq_pool_base();
    fn test_field_rx_desc_lim() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<rte_eth_dev_info>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).rx_desc_lim) as usize - ptr as usize
            },
            262usize,
            concat!(
                "Offset of field: ",
                stringify!(rte_eth_dev_info),
                "::",
                stringify!(rx_desc_lim)
            )
        );
    }
    test_field_rx_desc_lim();
    fn test_field_tx_desc_lim() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<rte_eth_dev_info>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).tx_desc_lim) as usize - ptr as usize
            },
            272usize,
            concat!(
                "Offset of field: ",
                stringify!(rte_eth_dev_info),
                "::",
                stringify!(tx_desc_lim)
            )
        );
    }
    test_field_tx_desc_lim();
    fn test_field_speed_capa() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<rte_eth_dev_info>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).speed_capa) as usize - ptr as usize
            },
            284usize,
            concat!(
                "Offset of field: ",
                stringify!(rte_eth_dev_info),
                "::",
                stringify!(speed_capa)
            )
        );
    }
    test_field_speed_capa();
    fn test_field_nb_rx_queues() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<rte_eth_dev_info>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).nb_rx_queues) as usize - ptr as usize
            },
            288usize,
            concat!(
                "Offset of field: ",
                stringify!(rte_eth_dev_info),
                "::",
                stringify!(nb_rx_queues)
            )
        );
    }
    test_field_nb_rx_queues();
    fn test_field_nb_tx_queues() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<rte_eth_dev_info>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).nb_tx_queues) as usize - ptr as usize
            },
            290usize,
            concat!(
                "Offset of field: ",
                stringify!(rte_eth_dev_info),
                "::",
                stringify!(nb_tx_queues)
            )
        );
    }
    test_field_nb_tx_queues();
    fn test_field_max_rx_mempools() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<rte_eth_dev_info>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).max_rx_mempools) as usize - ptr as usize
            },
            292usize,
            concat!(
                "Offset of field: ",
                stringify!(rte_eth_dev_info),
                "::",
                stringify!(max_rx_mempools)
            )
        );
    }
    test_field_max_rx_mempools();
    fn test_field_default_rxportconf() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<rte_eth_dev_info>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).default_rxportconf) as usize - ptr as usize
            },
            294usize,
            concat!(
                "Offset of field: ",
                stringify!(rte_eth_dev_info),
                "::",
                stringify!(default_rxportconf)
            )
        );
    }
    test_field_default_rxportconf();
    fn test_field_default_txportconf() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<rte_eth_dev_info>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).default_txportconf) as usize - ptr as usize
            },
            300usize,
            concat!(
                "Offset of field: ",
                stringify!(rte_eth_dev_info),
                "::",
                stringify!(default_txportconf)
            )
        );
    }
    test_field_default_txportconf();
    fn test_field_dev_capa() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<rte_eth_dev_info>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).dev_capa) as usize - ptr as usize
            },
            312usize,
            concat!(
                "Offset of field: ",
                stringify!(rte_eth_dev_info),
                "::",
                stringify!(dev_capa)
            )
        );
    }
    test_field_dev_capa();
    fn test_field_switch_info() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<rte_eth_dev_info>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).switch_info) as usize - ptr as usize
            },
            320usize,
            concat!(
                "Offset of field: ",
                stringify!(rte_eth_dev_info),
                "::",
                stringify!(switch_info)
            )
        );
    }
    test_field_switch_info();
    fn test_field_err_handle_mode() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<rte_eth_dev_info>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).err_handle_mode) as usize - ptr as usize
            },
            336usize,
            concat!(
                "Offset of field: ",
                stringify!(rte_eth_dev_info),
                "::",
                stringify!(err_handle_mode)
            )
        );
    }
    test_field_err_handle_mode();
    fn test_field_reserved_64s() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<rte_eth_dev_info>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).reserved_64s) as usize - ptr as usize
            },
            344usize,
            concat!(
                "Offset of field: ",
                stringify!(rte_eth_dev_info),
                "::",
                stringify!(reserved_64s)
            )
        );
    }
    test_field_reserved_64s();
    fn test_field_reserved_ptrs() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<rte_eth_dev_info>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).reserved_ptrs) as usize - ptr as usize
            },
            360usize,
            concat!(
                "Offset of field: ",
                stringify!(rte_eth_dev_info),
                "::",
                stringify!(reserved_ptrs)
            )
        );
    }
    test_field_reserved_ptrs();
}
extern "C" {
    pub fn rte_eth_find_next_owned_by(port_id: u16, owner_id: u64) -> u64;
}
extern "C" {
    pub fn rte_eth_dev_count_avail() -> u16;
}
extern "C" {
    pub fn rte_eth_dev_configure(
        port_id: u16,
        nb_rx_queue: u16,
        nb_tx_queue: u16,
        eth_conf: *const rte_eth_conf,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rte_eth_rx_queue_setup(
        port_id: u16,
        rx_queue_id: u16,
        nb_rx_desc: u16,
        socket_id: ::std::os::raw::c_uint,
        rx_conf: *const rte_eth_rxconf,
        mb_pool: *mut rte_mempool,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rte_eth_tx_queue_setup(
        port_id: u16,
        tx_queue_id: u16,
        nb_tx_desc: u16,
        socket_id: ::std::os::raw::c_uint,
        tx_conf: *const rte_eth_txconf,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rte_eth_dev_socket_id(port_id: u16) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rte_eth_dev_is_valid_port(port_id: u16) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rte_eth_dev_start(port_id: u16) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rte_eth_promiscuous_enable(port_id: u16) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rte_eth_link_get_nowait(port_id: u16, link: *mut rte_eth_link) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rte_eth_macaddr_get(port_id: u16, mac_addr: *mut rte_ether_addr) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rte_eth_dev_info_get(port_id: u16, dev_info: *mut rte_eth_dev_info) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rte_eth_dev_get_mtu(port_id: u16, mtu: *mut u16) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rte_eth_dev_set_mtu(port_id: u16, mtu: u16) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rte_eth_dev_flow_ctrl_get(port_id: u16, fc_conf: *mut rte_eth_fc_conf) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rte_eth_dev_flow_ctrl_set(port_id: u16, fc_conf: *mut rte_eth_fc_conf) -> ::std::os::raw::c_int;
}
